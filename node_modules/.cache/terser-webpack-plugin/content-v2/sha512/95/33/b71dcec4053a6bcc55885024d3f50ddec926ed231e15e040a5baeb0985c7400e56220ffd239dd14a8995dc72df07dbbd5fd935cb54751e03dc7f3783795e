{"code":"(this[\"webpackJsonpreact-pb\"]=this[\"webpackJsonpreact-pb\"]||[]).push([[7],{247:function(e,t,n){\"use strict\";n.r(t);var r,i,a=n(9),s=n(13),o=(n(241),n(82)),c=n(34),u=n(78),l=\"https://www.googletagmanager.com/gtag/js\";!function(e){e.EVENT=\"event\",e.SET=\"set\",e.CONFIG=\"config\"}(r||(r={})),function(e){e.ADD_SHIPPING_INFO=\"add_shipping_info\",e.ADD_PAYMENT_INFO=\"add_payment_info\",e.ADD_TO_CART=\"add_to_cart\",e.ADD_TO_WISHLIST=\"add_to_wishlist\",e.BEGIN_CHECKOUT=\"begin_checkout\",e.CHECKOUT_PROGRESS=\"checkout_progress\",e.EXCEPTION=\"exception\",e.GENERATE_LEAD=\"generate_lead\",e.LOGIN=\"login\",e.PAGE_VIEW=\"page_view\",e.PURCHASE=\"purchase\",e.REFUND=\"refund\",e.REMOVE_FROM_CART=\"remove_from_cart\",e.SCREEN_VIEW=\"screen_view\",e.SEARCH=\"search\",e.SELECT_CONTENT=\"select_content\",e.SELECT_ITEM=\"select_item\",e.SELECT_PROMOTION=\"select_promotion\",e.SET_CHECKOUT_OPTION=\"set_checkout_option\",e.SHARE=\"share\",e.SIGN_UP=\"sign_up\",e.TIMING_COMPLETE=\"timing_complete\",e.VIEW_CART=\"view_cart\",e.VIEW_ITEM=\"view_item\",e.VIEW_ITEM_LIST=\"view_item_list\",e.VIEW_PROMOTION=\"view_promotion\",e.VIEW_SEARCH_RESULTS=\"view_search_results\"}(i||(i={}));var d,f=new o.b(\"@firebase/analytics\");function h(e,t,n,i,s,o){return Object(a.e)(this,void 0,void 0,(function(){var c,u,l,d;return Object(a.g)(this,(function(a){switch(a.label){case 0:c=i[s],a.label=1;case 1:return a.trys.push([1,7,,8]),c?[4,t[c]]:[3,3];case 2:return a.sent(),[3,6];case 3:return[4,Promise.all(n)];case 4:return u=a.sent(),(l=u.find((function(e){return e.measurementId===s})))?[4,t[l.appId]]:[3,6];case 5:a.sent(),a.label=6;case 6:return[3,8];case 7:return d=a.sent(),f.error(d),[3,8];case 8:return e(r.CONFIG,s,o),[2]}}))}))}function p(e,t,n,i,s){return Object(a.e)(this,void 0,void 0,(function(){var o,c,u,l,d,h,p,m;return Object(a.g)(this,(function(a){switch(a.label){case 0:return a.trys.push([0,4,,5]),o=[],s&&s.send_to?(c=s.send_to,Array.isArray(c)||(c=[c]),[4,Promise.all(n)]):[3,2];case 1:for(u=a.sent(),l=function(e){var n=u.find((function(t){return t.measurementId===e})),r=n&&t[n.appId];if(!r)return o=[],\"break\";o.push(r)},d=0,h=c;d<h.length&&(p=h[d],\"break\"!==l(p));d++);a.label=2;case 2:return 0===o.length&&(o=Object.values(t)),[4,Promise.all(o)];case 3:return a.sent(),e(r.EVENT,i,s||{}),[3,5];case 4:return m=a.sent(),f.error(m),[3,5];case 5:return[2]}}))}))}function m(e,t,n,i,s){var o=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];window[i].push(arguments)};return window[s]&&\"function\"===typeof window[s]&&(o=window[s]),window[s]=function(e,t,n,i){return function(s,o,c){return Object(a.e)(this,void 0,void 0,(function(){var u;return Object(a.g)(this,(function(a){switch(a.label){case 0:return a.trys.push([0,6,,7]),s!==r.EVENT?[3,2]:[4,p(e,t,n,o,c)];case 1:return a.sent(),[3,5];case 2:return s!==r.CONFIG?[3,4]:[4,h(e,t,n,i,o,c)];case 3:return a.sent(),[3,5];case 4:e(r.SET,o),a.label=5;case 5:return[3,7];case 6:return u=a.sent(),f.error(u),[3,7];case 7:return[2]}}))}))}}(o,e,t,n),{gtagCore:o,wrappedGtag:window[s]}}var b=((d={})[\"already-exists\"]=\"A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.\",d[\"already-initialized\"]=\"Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.\",d[\"interop-component-reg-failed\"]=\"Firebase Analytics Interop Component failed to instantiate: {$reason}\",d[\"invalid-analytics-context\"]=\"Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}\",d[\"indexeddb-unavailable\"]=\"IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}\",d[\"fetch-throttle\"]=\"The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.\",d[\"config-fetch-failed\"]=\"Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}\",d[\"no-api-key\"]='The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',d[\"no-app-id\"]='The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.',d),v=new c.b(\"analytics\",\"Analytics\",b),g=new(function(){function e(e,t){void 0===e&&(e={}),void 0===t&&(t=1e3),this.throttleMetadata=e,this.intervalMillis=t}return e.prototype.getThrottleMetadata=function(e){return this.throttleMetadata[e]},e.prototype.setThrottleMetadata=function(e,t){this.throttleMetadata[e]=t},e.prototype.deleteThrottleMetadata=function(e){delete this.throttleMetadata[e]},e}());function I(e){return new Headers({Accept:\"application/json\",\"x-goog-api-key\":e})}function w(e){var t;return Object(a.e)(this,void 0,void 0,(function(){var n,r,i,s,o,c,u;return Object(a.g)(this,(function(a){switch(a.label){case 0:return n=e.appId,r=e.apiKey,i={method:\"GET\",headers:I(r)},s=\"https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig\".replace(\"{app-id}\",n),[4,fetch(s,i)];case 1:if(200===(o=a.sent()).status||304===o.status)return[3,6];c=\"\",a.label=2;case 2:return a.trys.push([2,4,,5]),[4,o.json()];case 3:return u=a.sent(),(null===(t=u.error)||void 0===t?void 0:t.message)&&(c=u.error.message),[3,5];case 4:return a.sent(),[3,5];case 5:throw v.create(\"config-fetch-failed\",{httpStatus:o.status,responseMessage:c});case 6:return[2,o.json()]}}))}))}function E(e,t,n,r){var i=t.throttleEndTimeMillis,s=t.backoffCount;return void 0===r&&(r=g),Object(a.e)(this,void 0,void 0,(function(){var t,o,u,l,d,h,p;return Object(a.g)(this,(function(a){switch(a.label){case 0:t=e.appId,o=e.measurementId,a.label=1;case 1:return a.trys.push([1,3,,4]),[4,y(n,i)];case 2:return a.sent(),[3,4];case 3:if(u=a.sent(),o)return f.warn(\"Timed out fetching this Firebase app's measurement ID from the server. Falling back to the measurement ID \"+o+' provided in the \"measurementId\" field in the local Firebase config. ['+u.message+\"]\"),[2,{appId:t,measurementId:o}];throw u;case 4:return a.trys.push([4,6,,7]),[4,w(e)];case 5:return l=a.sent(),r.deleteThrottleMetadata(t),[2,l];case 6:if(!function(e){if(!(e instanceof c.c)||!e.customData)return!1;var t=Number(e.customData.httpStatus);return 429===t||500===t||503===t||504===t}(d=a.sent())){if(r.deleteThrottleMetadata(t),o)return f.warn(\"Failed to fetch this Firebase app's measurement ID from the server. Falling back to the measurement ID \"+o+' provided in the \"measurementId\" field in the local Firebase config. ['+d.message+\"]\"),[2,{appId:t,measurementId:o}];throw d}return h=503===Number(d.customData.httpStatus)?Object(c.j)(s,r.intervalMillis,30):Object(c.j)(s,r.intervalMillis),p={throttleEndTimeMillis:Date.now()+h,backoffCount:s+1},r.setThrottleMetadata(t,p),f.debug(\"Calling attemptFetch again in \"+h+\" millis\"),[2,E(e,p,n,r)];case 7:return[2]}}))}))}function y(e,t){return new Promise((function(n,r){var i=Math.max(t-Date.now(),0),a=setTimeout(n,i);e.addEventListener((function(){clearTimeout(a),r(v.create(\"fetch-throttle\",{throttleEndTimeMillis:t}))}))}))}var O=function(){function e(){this.listeners=[]}return e.prototype.addEventListener=function(e){this.listeners.push(e)},e.prototype.abort=function(){this.listeners.forEach((function(e){return e()}))},e}();function T(e,t,n,i,s,o){return Object(a.e)(this,void 0,void 0,(function(){var u,d,h,p,m,b,I;return Object(a.g)(this,(function(w){switch(w.label){case 0:return u=function(e,t,n){return void 0===t&&(t=g),Object(a.e)(this,void 0,void 0,(function(){var r,i,s,o,c,u,l=this;return Object(a.g)(this,(function(d){if(r=e.options,i=r.appId,s=r.apiKey,o=r.measurementId,!i)throw v.create(\"no-app-id\");if(!s){if(o)return[2,{measurementId:o,appId:i}];throw v.create(\"no-api-key\")}return c=t.getThrottleMetadata(i)||{backoffCount:0,throttleEndTimeMillis:Date.now()},u=new O,setTimeout((function(){return Object(a.e)(l,void 0,void 0,(function(){return Object(a.g)(this,(function(e){return u.abort(),[2]}))}))}),void 0!==n?n:6e4),[2,E({appId:i,apiKey:s,measurementId:o},c,u,t)]}))}))}(e),u.then((function(t){n[t.measurementId]=t.appId,e.options.measurementId&&t.measurementId!==e.options.measurementId&&f.warn(\"The measurement ID in the local Firebase config (\"+e.options.measurementId+\") does not match the measurement ID fetched from the server (\"+t.measurementId+\"). To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.\")})).catch((function(e){return f.error(e)})),t.push(u),d=function(){return Object(a.e)(this,void 0,void 0,(function(){var e;return Object(a.g)(this,(function(t){switch(t.label){case 0:return Object(c.y)()?[3,1]:(f.warn(v.create(\"indexeddb-unavailable\",{errorInfo:\"IndexedDB is not available in this environment.\"}).message),[2,!1]);case 1:return t.trys.push([1,3,,4]),[4,Object(c.Q)()];case 2:return t.sent(),[3,4];case 3:return e=t.sent(),f.warn(v.create(\"indexeddb-unavailable\",{errorInfo:e}).message),[2,!1];case 4:return[2,!0]}}))}))}().then((function(e){return e?i.getId():void 0})),[4,Promise.all([u,d])];case 1:return h=w.sent(),p=h[0],m=h[1],function(){for(var e=window.document.getElementsByTagName(\"script\"),t=0,n=Object.values(e);t<n.length;t++){var r=n[t];if(r.src&&r.src.includes(l))return r}return null}()||function(e,t){var n=document.createElement(\"script\");n.src=l+\"?l=\"+e+\"&id=\"+t,n.async=!0,document.head.appendChild(n)}(o,p.measurementId),s(\"js\",new Date),(I={}).origin=\"firebase\",I.update=!0,b=I,null!=m&&(b.firebase_id=m),s(r.CONFIG,p.measurementId,b),[2,p.measurementId]}}))}))}var _,j,N={},C=[],A={},F=\"dataLayer\",D=\"gtag\",M=!1;function S(e){if(M)throw v.create(\"already-initialized\");e.dataLayerName&&(F=e.dataLayerName),e.gtagName&&(D=e.gtagName)}function P(e,t){!function(){var e=[];if(Object(c.u)()&&e.push(\"This is a browser extension environment.\"),Object(c.e)()||e.push(\"Cookies are not available.\"),e.length>0){var t=e.map((function(e,t){return\"(\"+(t+1)+\") \"+e})).join(\" \"),n=v.create(\"invalid-analytics-context\",{errorInfo:t});f.warn(n.message)}}();var n=e.options.appId;if(!n)throw v.create(\"no-app-id\");if(!e.options.apiKey){if(!e.options.measurementId)throw v.create(\"no-api-key\");f.warn('The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest measurement ID for this Firebase app. Falling back to the measurement ID '+e.options.measurementId+' provided in the \"measurementId\" field in the local Firebase config.')}if(null!=N[n])throw v.create(\"already-exists\",{id:n});if(!M){!function(e){var t=[];Array.isArray(window[e])?t=window[e]:window[e]=t}(F);var i=m(N,C,A,F,D),s=i.wrappedGtag,o=i.gtagCore;j=s,_=o,M=!0}N[n]=T(e,C,A,t,_,F);var u={app:e,logEvent:function(e,t,i){(function(e,t,n,i,s){return Object(a.e)(this,void 0,void 0,(function(){var o,c;return Object(a.g)(this,(function(u){switch(u.label){case 0:return s&&s.global?(e(r.EVENT,n,i),[2]):[3,1];case 1:return[4,t];case 2:o=u.sent(),c=Object(a.a)(Object(a.a)({},i),{send_to:o}),e(r.EVENT,n,c),u.label=3;case 3:return[2]}}))}))})(j,N[n],e,t,i).catch((function(e){return f.error(e)}))},setCurrentScreen:function(e,t){(function(e,t,n,i){return Object(a.e)(this,void 0,void 0,(function(){var s;return Object(a.g)(this,(function(a){switch(a.label){case 0:return i&&i.global?(e(r.SET,{screen_name:n}),[2,Promise.resolve()]):[3,1];case 1:return[4,t];case 2:s=a.sent(),e(r.CONFIG,s,{update:!0,screen_name:n}),a.label=3;case 3:return[2]}}))}))})(j,N[n],e,t).catch((function(e){return f.error(e)}))},setUserId:function(e,t){(function(e,t,n,i){return Object(a.e)(this,void 0,void 0,(function(){var s;return Object(a.g)(this,(function(a){switch(a.label){case 0:return i&&i.global?(e(r.SET,{user_id:n}),[2,Promise.resolve()]):[3,1];case 1:return[4,t];case 2:s=a.sent(),e(r.CONFIG,s,{update:!0,user_id:n}),a.label=3;case 3:return[2]}}))}))})(j,N[n],e,t).catch((function(e){return f.error(e)}))},setUserProperties:function(e,t){(function(e,t,n,i){return Object(a.e)(this,void 0,void 0,(function(){var s,o,c,u,l;return Object(a.g)(this,(function(a){switch(a.label){case 0:if(!i||!i.global)return[3,1];for(s={},o=0,c=Object.keys(n);o<c.length;o++)u=c[o],s[\"user_properties.\"+u]=n[u];return e(r.SET,s),[2,Promise.resolve()];case 1:return[4,t];case 2:l=a.sent(),e(r.CONFIG,l,{update:!0,user_properties:n}),a.label=3;case 3:return[2]}}))}))})(j,N[n],e,t).catch((function(e){return f.error(e)}))},setAnalyticsCollectionEnabled:function(e){(function(e,t){return Object(a.e)(this,void 0,void 0,(function(){var n;return Object(a.g)(this,(function(r){switch(r.label){case 0:return[4,e];case 1:return n=r.sent(),window[\"ga-disable-\"+n]=!t,[2]}}))}))})(N[n],e).catch((function(e){return f.error(e)}))},INTERNAL:{delete:function(){return delete N[n],Promise.resolve()}}};return u}var k,R=\"analytics\";function G(){return Object(a.e)(this,void 0,void 0,(function(){return Object(a.g)(this,(function(e){switch(e.label){case 0:if(Object(c.u)())return[2,!1];if(!Object(c.e)())return[2,!1];if(!Object(c.y)())return[2,!1];e.label=1;case 1:return e.trys.push([1,3,,4]),[4,Object(c.Q)()];case 2:return[2,e.sent()];case 3:return e.sent(),[2,!1];case 4:return[2]}}))}))}(k=s.a).INTERNAL.registerComponent(new u.a(R,(function(e){return P(e.getProvider(\"app\").getImmediate(),e.getProvider(\"installations\").getImmediate())}),\"PUBLIC\").setServiceProps({settings:S,EventName:i,isSupported:G})),k.INTERNAL.registerComponent(new u.a(\"analytics-internal\",(function(e){try{return{logEvent:e.getProvider(R).getImmediate().logEvent}}catch(t){throw v.create(\"interop-component-reg-failed\",{reason:t})}}),\"PRIVATE\")),k.registerVersion(\"@firebase/analytics\",\"0.6.18\")}}]);","name":"static/js/7.68cdc7b9.chunk.js","map":{"version":3,"names":["this","push","module","__webpack_exports__","__webpack_require__","r","GtagCommand","EventName","tslib_es6","index_esm","logger_dist_index_esm","util_dist_index_esm","component_dist_index_esm","GTAG_URL","index_esm_a","logger","gtagOnConfig","gtagCore","initializationPromisesMap","dynamicConfigPromisesList","measurementIdToAppId","measurementId","gtagParams","Object","correspondingAppId","dynamicConfigResults","foundConfig","e_1","_a","label","trys","sent","Promise","all","find","config","appId","error","CONFIG","gtagOnEvent","initializationPromisesToWaitFor","gaSendToList","_loop_1","_i","gaSendToList_1","sendToId","e_2","Array","isArray","initializationPromise","length","values","EVENT","wrapOrCreateGtag","dataLayerName","gtagFunctionName","_args","arguments","window","command","idOrNameOrParams","e_3","SET","wrapGtag","wrappedGtag","ERRORS","ERROR_FACTORY","defaultRetryData","RetryData","throttleMetadata","intervalMillis","prototype","getThrottleMetadata","setThrottleMetadata","metadata","deleteThrottleMetadata","getHeaders","apiKey","Headers","Accept","fetchDynamicConfig","appFields","request","appUrl","response","errorMessage","jsonResponse","_b","method","headers","replace","fetch","status","json","message","create","httpStatus","responseMessage","attemptFetchDynamicConfigWithRetry","signal","retryData","throttleEndTimeMillis","backoffCount","backoffMillis","setAbortableTimeout","warn","e","customData","Number","isRetriableError","Date","now","debug","resolve","reject","Math","max","timeout","setTimeout","addEventListener","clearTimeout","AnalyticsAbortSignal","listeners","listener","abort","forEach","initializeIds","app","installations","dynamicConfigPromise","fidPromise","dynamicConfig","fid","configProperties","_c","timeoutMillis","_this","options","undefined","fetchDynamicConfigWithRetry","then","catch","errorInfo","validateIndexedDB","envIsValid","getId","scriptTags","document","getElementsByTagName","tag","src","includes","findGtagScriptOnPage","script","createElement","async","head","appendChild","insertScriptTag","update","gtagCoreFunction","wrappedGtagFunction","index_esm_initializationPromisesMap","index_esm_dynamicConfigPromisesList","index_esm_measurementIdToAppId","index_esm_dataLayerName","gtagName","globalInitDone","settings","factory","mismatchedEnvMessages","details","map","index","join","err","warnOnBrowserContextMismatch","id","dataLayer","getOrCreateDataLayer","analyticsInstance","logEvent","eventName","eventParams","gtagFunction","params","global","send_to","_logEvent","setCurrentScreen","screenName","screen_name","_setCurrentScreen","setUserId","user_id","_setUserId","setUserProperties","properties","flatProperties","key","keys","user_properties","_setUserProperties","setAnalyticsCollectionEnabled","enabled","_setAnalyticsCollectionEnabled","INTERNAL","delete","instance","ANALYTICS_TYPE","isSupported","registerComponent","container","getProvider","getImmediate","setServiceProps","reason","registerVersion"],"sources":["static/js/7.68cdc7b9.chunk.js"],"mappings":"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"},"input":"(this[\"webpackJsonpreact-pb\"] = this[\"webpackJsonpreact-pb\"] || []).push([[7],{\n\n/***/ 247:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js\nvar tslib_es6 = __webpack_require__(9);\n\n// EXTERNAL MODULE: ./node_modules/@firebase/app/dist/index.esm.js\nvar index_esm = __webpack_require__(13);\n\n// EXTERNAL MODULE: ./node_modules/@firebase/installations/dist/index.esm.js\nvar dist_index_esm = __webpack_require__(241);\n\n// EXTERNAL MODULE: ./node_modules/@firebase/logger/dist/index.esm.js\nvar logger_dist_index_esm = __webpack_require__(82);\n\n// EXTERNAL MODULE: ./node_modules/@firebase/util/dist/index.esm.js\nvar util_dist_index_esm = __webpack_require__(34);\n\n// EXTERNAL MODULE: ./node_modules/@firebase/component/dist/index.esm.js\nvar component_dist_index_esm = __webpack_require__(78);\n\n// CONCATENATED MODULE: ./node_modules/@firebase/analytics/dist/index.esm.js\n\n\n\n\n\n\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Key to attach FID to in gtag params.\nvar GA_FID_KEY = 'firebase_id';\nvar ORIGIN_KEY = 'origin';\nvar FETCH_TIMEOUT_MILLIS = 60 * 1000;\nvar DYNAMIC_CONFIG_URL = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\nvar GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\nvar GtagCommand;\n(function (GtagCommand) {\n  GtagCommand[\"EVENT\"] = \"event\";\n  GtagCommand[\"SET\"] = \"set\";\n  GtagCommand[\"CONFIG\"] = \"config\";\n})(GtagCommand || (GtagCommand = {}));\n/**\r\n * Officially recommended event names for gtag.js\r\n * Any other string is also allowed.\r\n *\r\n * @public\r\n */\nvar EventName;\n(function (EventName) {\n  EventName[\"ADD_SHIPPING_INFO\"] = \"add_shipping_info\";\n  EventName[\"ADD_PAYMENT_INFO\"] = \"add_payment_info\";\n  EventName[\"ADD_TO_CART\"] = \"add_to_cart\";\n  EventName[\"ADD_TO_WISHLIST\"] = \"add_to_wishlist\";\n  EventName[\"BEGIN_CHECKOUT\"] = \"begin_checkout\";\n  /**\r\n   * @deprecated\r\n   * This event name is deprecated and is unsupported in updated\r\n   * Enhanced Ecommerce reports.\r\n   */\n  EventName[\"CHECKOUT_PROGRESS\"] = \"checkout_progress\";\n  EventName[\"EXCEPTION\"] = \"exception\";\n  EventName[\"GENERATE_LEAD\"] = \"generate_lead\";\n  EventName[\"LOGIN\"] = \"login\";\n  EventName[\"PAGE_VIEW\"] = \"page_view\";\n  EventName[\"PURCHASE\"] = \"purchase\";\n  EventName[\"REFUND\"] = \"refund\";\n  EventName[\"REMOVE_FROM_CART\"] = \"remove_from_cart\";\n  EventName[\"SCREEN_VIEW\"] = \"screen_view\";\n  EventName[\"SEARCH\"] = \"search\";\n  EventName[\"SELECT_CONTENT\"] = \"select_content\";\n  EventName[\"SELECT_ITEM\"] = \"select_item\";\n  EventName[\"SELECT_PROMOTION\"] = \"select_promotion\";\n  /** @deprecated */\n  EventName[\"SET_CHECKOUT_OPTION\"] = \"set_checkout_option\";\n  EventName[\"SHARE\"] = \"share\";\n  EventName[\"SIGN_UP\"] = \"sign_up\";\n  EventName[\"TIMING_COMPLETE\"] = \"timing_complete\";\n  EventName[\"VIEW_CART\"] = \"view_cart\";\n  EventName[\"VIEW_ITEM\"] = \"view_item\";\n  EventName[\"VIEW_ITEM_LIST\"] = \"view_item_list\";\n  EventName[\"VIEW_PROMOTION\"] = \"view_promotion\";\n  EventName[\"VIEW_SEARCH_RESULTS\"] = \"view_search_results\";\n})(EventName || (EventName = {}));\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Logs an analytics event through the Firebase SDK.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\r\n * @param eventParams Analytics event parameters.\r\n */\nfunction _logEvent(gtagFunction, initializationPromise, eventName, eventParams, options) {\n  return Object(tslib_es6[\"e\" /* __awaiter */])(this, void 0, void 0, function () {\n    var measurementId, params;\n    return Object(tslib_es6[\"g\" /* __generator */])(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!(options && options.global)) return [3 /*break*/, 1];\n          gtagFunction(GtagCommand.EVENT, eventName, eventParams);\n          return [2 /*return*/];\n        case 1:\n          return [4 /*yield*/, initializationPromise];\n        case 2:\n          measurementId = _a.sent();\n          params = Object(tslib_es6[\"a\" /* __assign */])(Object(tslib_es6[\"a\" /* __assign */])({}, eventParams), {\n            'send_to': measurementId\n          });\n          gtagFunction(GtagCommand.EVENT, eventName, params);\n          _a.label = 3;\n        case 3:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * Set screen_name parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param screenName Screen name string to set.\r\n */\nfunction _setCurrentScreen(gtagFunction, initializationPromise, screenName, options) {\n  return Object(tslib_es6[\"e\" /* __awaiter */])(this, void 0, void 0, function () {\n    var measurementId;\n    return Object(tslib_es6[\"g\" /* __generator */])(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!(options && options.global)) return [3 /*break*/, 1];\n          gtagFunction(GtagCommand.SET, {\n            'screen_name': screenName\n          });\n          return [2 /*return*/, Promise.resolve()];\n        case 1:\n          return [4 /*yield*/, initializationPromise];\n        case 2:\n          measurementId = _a.sent();\n          gtagFunction(GtagCommand.CONFIG, measurementId, {\n            update: true,\n            'screen_name': screenName\n          });\n          _a.label = 3;\n        case 3:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * Set user_id parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param id User ID string to set\r\n */\nfunction _setUserId(gtagFunction, initializationPromise, id, options) {\n  return Object(tslib_es6[\"e\" /* __awaiter */])(this, void 0, void 0, function () {\n    var measurementId;\n    return Object(tslib_es6[\"g\" /* __generator */])(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!(options && options.global)) return [3 /*break*/, 1];\n          gtagFunction(GtagCommand.SET, {\n            'user_id': id\n          });\n          return [2 /*return*/, Promise.resolve()];\n        case 1:\n          return [4 /*yield*/, initializationPromise];\n        case 2:\n          measurementId = _a.sent();\n          gtagFunction(GtagCommand.CONFIG, measurementId, {\n            update: true,\n            'user_id': id\n          });\n          _a.label = 3;\n        case 3:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * Set all other user properties other than user_id and screen_name.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param properties Map of user properties to set\r\n */\nfunction _setUserProperties(gtagFunction, initializationPromise, properties, options) {\n  return Object(tslib_es6[\"e\" /* __awaiter */])(this, void 0, void 0, function () {\n    var flatProperties, _i, _a, key, measurementId;\n    return Object(tslib_es6[\"g\" /* __generator */])(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          if (!(options && options.global)) return [3 /*break*/, 1];\n          flatProperties = {};\n          for (_i = 0, _a = Object.keys(properties); _i < _a.length; _i++) {\n            key = _a[_i];\n            // use dot notation for merge behavior in gtag.js\n            flatProperties[\"user_properties.\" + key] = properties[key];\n          }\n          gtagFunction(GtagCommand.SET, flatProperties);\n          return [2 /*return*/, Promise.resolve()];\n        case 1:\n          return [4 /*yield*/, initializationPromise];\n        case 2:\n          measurementId = _b.sent();\n          gtagFunction(GtagCommand.CONFIG, measurementId, {\n            update: true,\n            'user_properties': properties\n          });\n          _b.label = 3;\n        case 3:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * Set whether collection is enabled for this ID.\r\n *\r\n * @param enabled If true, collection is enabled for this ID.\r\n */\nfunction _setAnalyticsCollectionEnabled(initializationPromise, enabled) {\n  return Object(tslib_es6[\"e\" /* __awaiter */])(this, void 0, void 0, function () {\n    var measurementId;\n    return Object(tslib_es6[\"g\" /* __generator */])(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, initializationPromise];\n        case 1:\n          measurementId = _a.sent();\n          window[\"ga-disable-\" + measurementId] = !enabled;\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar logger = new logger_dist_index_esm[\"b\" /* Logger */]('@firebase/analytics');\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Inserts gtag script tag into the page to asynchronously download gtag.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\nfunction insertScriptTag(dataLayerName, measurementId) {\n  var script = document.createElement('script');\n  script.src = GTAG_URL + \"?l=\" + dataLayerName + \"&id=\" + measurementId;\n  script.async = true;\n  document.head.appendChild(script);\n}\n/**\r\n * Get reference to, or create, global datalayer.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\nfunction getOrCreateDataLayer(dataLayerName) {\n  // Check for existing dataLayer and create if needed.\n  var dataLayer = [];\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName];\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n  return dataLayer;\n}\n/**\r\n * Wrapped gtag logic when gtag is called with 'config' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param measurementId GA Measurement ID to set config for.\r\n * @param gtagParams Gtag config params to set.\r\n */\nfunction gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams) {\n  return Object(tslib_es6[\"e\" /* __awaiter */])(this, void 0, void 0, function () {\n    var correspondingAppId, dynamicConfigResults, foundConfig, e_1;\n    return Object(tslib_es6[\"g\" /* __generator */])(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          correspondingAppId = measurementIdToAppId[measurementId];\n          _a.label = 1;\n        case 1:\n          _a.trys.push([1, 7,, 8]);\n          if (!correspondingAppId) return [3 /*break*/, 3];\n          return [4 /*yield*/, initializationPromisesMap[correspondingAppId]];\n        case 2:\n          _a.sent();\n          return [3 /*break*/, 6];\n        case 3:\n          return [4 /*yield*/, Promise.all(dynamicConfigPromisesList)];\n        case 4:\n          dynamicConfigResults = _a.sent();\n          foundConfig = dynamicConfigResults.find(function (config) {\n            return config.measurementId === measurementId;\n          });\n          if (!foundConfig) return [3 /*break*/, 6];\n          return [4 /*yield*/, initializationPromisesMap[foundConfig.appId]];\n        case 5:\n          _a.sent();\n          _a.label = 6;\n        case 6:\n          return [3 /*break*/, 8];\n        case 7:\n          e_1 = _a.sent();\n          logger.error(e_1);\n          return [3 /*break*/, 8];\n        case 8:\n          gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * Wrapped gtag logic when gtag is called with 'event' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementId GA Measurement ID to log event to.\r\n * @param gtagParams Params to log with this event.\r\n */\nfunction gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams) {\n  return Object(tslib_es6[\"e\" /* __awaiter */])(this, void 0, void 0, function () {\n    var initializationPromisesToWaitFor, gaSendToList, dynamicConfigResults, _loop_1, _i, gaSendToList_1, sendToId, state_1, e_2;\n    return Object(tslib_es6[\"g\" /* __generator */])(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 4,, 5]);\n          initializationPromisesToWaitFor = [];\n          if (!(gtagParams && gtagParams['send_to'])) return [3 /*break*/, 2];\n          gaSendToList = gtagParams['send_to'];\n          // Make it an array if is isn't, so it can be dealt with the same way.\n          if (!Array.isArray(gaSendToList)) {\n            gaSendToList = [gaSendToList];\n          }\n          return [4 /*yield*/, Promise.all(dynamicConfigPromisesList)];\n        case 1:\n          dynamicConfigResults = _a.sent();\n          _loop_1 = function _loop_1(sendToId) {\n            // Any fetched dynamic measurement ID that matches this 'send_to' ID\n            var foundConfig = dynamicConfigResults.find(function (config) {\n              return config.measurementId === sendToId;\n            });\n            var initializationPromise = foundConfig && initializationPromisesMap[foundConfig.appId];\n            if (initializationPromise) {\n              initializationPromisesToWaitFor.push(initializationPromise);\n            } else {\n              // Found an item in 'send_to' that is not associated\n              // directly with an FID, possibly a group.  Empty this array,\n              // exit the loop early, and let it get populated below.\n              initializationPromisesToWaitFor = [];\n              return \"break\";\n            }\n          };\n          for (_i = 0, gaSendToList_1 = gaSendToList; _i < gaSendToList_1.length; _i++) {\n            sendToId = gaSendToList_1[_i];\n            state_1 = _loop_1(sendToId);\n            if (state_1 === \"break\") break;\n          }\n          _a.label = 2;\n        case 2:\n          // This will be unpopulated if there was no 'send_to' field , or\n          // if not all entries in the 'send_to' field could be mapped to\n          // a FID. In these cases, wait on all pending initialization promises.\n          if (initializationPromisesToWaitFor.length === 0) {\n            initializationPromisesToWaitFor = Object.values(initializationPromisesMap);\n          }\n          // Run core gtag function with args after all relevant initialization\n          // promises have been resolved.\n          return [4 /*yield*/, Promise.all(initializationPromisesToWaitFor)];\n        case 3:\n          // Run core gtag function with args after all relevant initialization\n          // promises have been resolved.\n          _a.sent();\n          // Workaround for http://b/141370449 - third argument cannot be undefined.\n          gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});\n          return [3 /*break*/, 5];\n        case 4:\n          e_2 = _a.sent();\n          logger.error(e_2);\n          return [3 /*break*/, 5];\n        case 5:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * Wraps a standard gtag function with extra code to wait for completion of\r\n * relevant initialization promises before sending requests.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n */\nfunction wrapGtag(gtagCore,\n/**\r\n * Allows wrapped gtag calls to wait on whichever intialization promises are required,\r\n * depending on the contents of the gtag params' `send_to` field, if any.\r\n */\ninitializationPromisesMap,\n/**\r\n * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\r\n * before determining what initialization promises (which include FIDs) to wait for.\r\n */\ndynamicConfigPromisesList,\n/**\r\n * Wrapped gtag config calls can narrow down which initialization promise (with FID)\r\n * to wait for if the measurementId is already fetched, by getting the corresponding appId,\r\n * which is the key for the initialization promises map.\r\n */\nmeasurementIdToAppId) {\n  /**\r\n   * Wrapper around gtag that ensures FID is sent with gtag calls.\r\n   * @param command Gtag command type.\r\n   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\r\n   * @param gtagParams Params if event is EVENT/CONFIG.\r\n   */\n  function gtagWrapper(command, idOrNameOrParams, gtagParams) {\n    return Object(tslib_es6[\"e\" /* __awaiter */])(this, void 0, void 0, function () {\n      var e_3;\n      return Object(tslib_es6[\"g\" /* __generator */])(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 6,, 7]);\n            if (!(command === GtagCommand.EVENT)) return [3 /*break*/, 2];\n            // If EVENT, second arg must be measurementId.\n            return [4 /*yield*/, gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, idOrNameOrParams, gtagParams)];\n          case 1:\n            // If EVENT, second arg must be measurementId.\n            _a.sent();\n            return [3 /*break*/, 5];\n          case 2:\n            if (!(command === GtagCommand.CONFIG)) return [3 /*break*/, 4];\n            // If CONFIG, second arg must be measurementId.\n            return [4 /*yield*/, gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, idOrNameOrParams, gtagParams)];\n          case 3:\n            // If CONFIG, second arg must be measurementId.\n            _a.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            // If SET, second arg must be params.\n            gtagCore(GtagCommand.SET, idOrNameOrParams);\n            _a.label = 5;\n          case 5:\n            return [3 /*break*/, 7];\n          case 6:\n            e_3 = _a.sent();\n            logger.error(e_3);\n            return [3 /*break*/, 7];\n          case 7:\n            return [2 /*return*/];\n        }\n      });\n    });\n  }\n\n  return gtagWrapper;\n}\n/**\r\n * Creates global gtag function or wraps existing one if found.\r\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\r\n * 'event' calls that belong to the GAID associated with this Firebase instance.\r\n *\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param dataLayerName Name of global GA datalayer array.\r\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\r\n */\nfunction wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagFunctionName) {\n  // Create a basic core gtag function\n  var gtagCore = function gtagCore() {\n    var _args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      _args[_i] = arguments[_i];\n    }\n    // Must push IArguments object, not an array.\n    window[dataLayerName].push(arguments);\n  };\n  // Replace it with existing one if found\n  if (window[gtagFunctionName] && typeof window[gtagFunctionName] === 'function') {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n  window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId);\n  return {\n    gtagCore: gtagCore,\n    wrappedGtag: window[gtagFunctionName]\n  };\n}\n/**\r\n * Returns first script tag in DOM matching our gtag url pattern.\r\n */\nfunction findGtagScriptOnPage() {\n  var scriptTags = window.document.getElementsByTagName('script');\n  for (var _i = 0, _a = Object.values(scriptTags); _i < _a.length; _i++) {\n    var tag = _a[_i];\n    if (tag.src && tag.src.includes(GTAG_URL)) {\n      return tag;\n    }\n  }\n  return null;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar index_esm_a;\nvar ERRORS = (index_esm_a = {}, index_esm_a[\"already-exists\" /* ALREADY_EXISTS */] = 'A Firebase Analytics instance with the appId {$id} ' + ' already exists. ' + 'Only one Firebase Analytics instance can be created for each appId.', index_esm_a[\"already-initialized\" /* ALREADY_INITIALIZED */] = 'Firebase Analytics has already been initialized.' + 'settings() must be called before initializing any Analytics instance' + 'or it will have no effect.', index_esm_a[\"interop-component-reg-failed\" /* INTEROP_COMPONENT_REG_FAILED */] = 'Firebase Analytics Interop Component failed to instantiate: {$reason}', index_esm_a[\"invalid-analytics-context\" /* INVALID_ANALYTICS_CONTEXT */] = 'Firebase Analytics is not supported in this environment. ' + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments. Details: {$errorInfo}', index_esm_a[\"indexeddb-unavailable\" /* INDEXEDDB_UNAVAILABLE */] = 'IndexedDB unavailable or restricted in this environment. ' + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments. Details: {$errorInfo}', index_esm_a[\"fetch-throttle\" /* FETCH_THROTTLE */] = 'The config fetch request timed out while in an exponential backoff state.' + ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.', index_esm_a[\"config-fetch-failed\" /* CONFIG_FETCH_FAILED */] = 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}', index_esm_a[\"no-api-key\" /* NO_API_KEY */] = 'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' + 'contain a valid API key.', index_esm_a[\"no-app-id\" /* NO_APP_ID */] = 'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' + 'contain a valid app ID.', index_esm_a);\nvar ERROR_FACTORY = new util_dist_index_esm[\"b\" /* ErrorFactory */]('analytics', 'Analytics', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Backoff factor for 503 errors, which we want to be conservative about\r\n * to avoid overloading servers. Each retry interval will be\r\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\r\n * will be ~30 seconds (with fuzzing).\r\n */\nvar LONG_RETRY_FACTOR = 30;\n/**\r\n * Base wait interval to multiplied by backoffFactor^backoffCount.\r\n */\nvar BASE_INTERVAL_MILLIS = 1000;\n/**\r\n * Stubbable retry data storage class.\r\n */\nvar RetryData = /** @class */function () {\n  function RetryData(throttleMetadata, intervalMillis) {\n    if (throttleMetadata === void 0) {\n      throttleMetadata = {};\n    }\n    if (intervalMillis === void 0) {\n      intervalMillis = BASE_INTERVAL_MILLIS;\n    }\n    this.throttleMetadata = throttleMetadata;\n    this.intervalMillis = intervalMillis;\n  }\n  RetryData.prototype.getThrottleMetadata = function (appId) {\n    return this.throttleMetadata[appId];\n  };\n  RetryData.prototype.setThrottleMetadata = function (appId, metadata) {\n    this.throttleMetadata[appId] = metadata;\n  };\n  RetryData.prototype.deleteThrottleMetadata = function (appId) {\n    delete this.throttleMetadata[appId];\n  };\n  return RetryData;\n}();\nvar defaultRetryData = new RetryData();\n/**\r\n * Set GET request headers.\r\n * @param apiKey App API key.\r\n */\nfunction getHeaders(apiKey) {\n  return new Headers({\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n/**\r\n * Fetches dynamic config from backend.\r\n * @param app Firebase app to fetch config for.\r\n */\nfunction fetchDynamicConfig(appFields) {\n  var _a;\n  return Object(tslib_es6[\"e\" /* __awaiter */])(this, void 0, void 0, function () {\n    var appId, apiKey, request, appUrl, response, errorMessage, jsonResponse;\n    return Object(tslib_es6[\"g\" /* __generator */])(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          appId = appFields.appId, apiKey = appFields.apiKey;\n          request = {\n            method: 'GET',\n            headers: getHeaders(apiKey)\n          };\n          appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\n          return [4 /*yield*/, fetch(appUrl, request)];\n        case 1:\n          response = _b.sent();\n          if (!(response.status !== 200 && response.status !== 304)) return [3 /*break*/, 6];\n          errorMessage = '';\n          _b.label = 2;\n        case 2:\n          _b.trys.push([2, 4,, 5]);\n          return [4 /*yield*/, response.json()];\n        case 3:\n          jsonResponse = _b.sent();\n          if ((_a = jsonResponse.error) === null || _a === void 0 ? void 0 : _a.message) {\n            errorMessage = jsonResponse.error.message;\n          }\n          return [3 /*break*/, 5];\n        case 4:\n          _b.sent();\n          return [3 /*break*/, 5];\n        case 5:\n          throw ERROR_FACTORY.create(\"config-fetch-failed\" /* CONFIG_FETCH_FAILED */, {\n            httpStatus: response.status,\n            responseMessage: errorMessage\n          });\n        case 6:\n          return [2 /*return*/, response.json()];\n      }\n    });\n  });\n}\n/**\r\n * Fetches dynamic config from backend, retrying if failed.\r\n * @param app Firebase app to fetch config for.\r\n */\nfunction fetchDynamicConfigWithRetry(app,\n// retryData and timeoutMillis are parameterized to allow passing a different value for testing.\nretryData, timeoutMillis) {\n  if (retryData === void 0) {\n    retryData = defaultRetryData;\n  }\n  return Object(tslib_es6[\"e\" /* __awaiter */])(this, void 0, void 0, function () {\n    var _a, appId, apiKey, measurementId, throttleMetadata, signal;\n    var _this = this;\n    return Object(tslib_es6[\"g\" /* __generator */])(this, function (_b) {\n      _a = app.options, appId = _a.appId, apiKey = _a.apiKey, measurementId = _a.measurementId;\n      if (!appId) {\n        throw ERROR_FACTORY.create(\"no-app-id\" /* NO_APP_ID */);\n      }\n\n      if (!apiKey) {\n        if (measurementId) {\n          return [2 /*return*/, {\n            measurementId: measurementId,\n            appId: appId\n          }];\n        }\n        throw ERROR_FACTORY.create(\"no-api-key\" /* NO_API_KEY */);\n      }\n\n      throttleMetadata = retryData.getThrottleMetadata(appId) || {\n        backoffCount: 0,\n        throttleEndTimeMillis: Date.now()\n      };\n      signal = new AnalyticsAbortSignal();\n      setTimeout(function () {\n        return Object(tslib_es6[\"e\" /* __awaiter */])(_this, void 0, void 0, function () {\n          return Object(tslib_es6[\"g\" /* __generator */])(this, function (_a) {\n            // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n            signal.abort();\n            return [2 /*return*/];\n          });\n        });\n      }, timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS);\n      return [2 /*return*/, attemptFetchDynamicConfigWithRetry({\n        appId: appId,\n        apiKey: apiKey,\n        measurementId: measurementId\n      }, throttleMetadata, signal, retryData)];\n    });\n  });\n}\n/**\r\n * Runs one retry attempt.\r\n * @param appFields Necessary app config fields.\r\n * @param throttleMetadata Ongoing metadata to determine throttling times.\r\n * @param signal Abort signal.\r\n */\nfunction attemptFetchDynamicConfigWithRetry(appFields, _a, signal, retryData // for testing\n) {\n  var throttleEndTimeMillis = _a.throttleEndTimeMillis,\n    backoffCount = _a.backoffCount;\n  if (retryData === void 0) {\n    retryData = defaultRetryData;\n  }\n  return Object(tslib_es6[\"e\" /* __awaiter */])(this, void 0, void 0, function () {\n    var appId, measurementId, e_1, response, e_2, backoffMillis, throttleMetadata;\n    return Object(tslib_es6[\"g\" /* __generator */])(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          appId = appFields.appId, measurementId = appFields.measurementId;\n          _b.label = 1;\n        case 1:\n          _b.trys.push([1, 3,, 4]);\n          return [4 /*yield*/, setAbortableTimeout(signal, throttleEndTimeMillis)];\n        case 2:\n          _b.sent();\n          return [3 /*break*/, 4];\n        case 3:\n          e_1 = _b.sent();\n          if (measurementId) {\n            logger.warn(\"Timed out fetching this Firebase app's measurement ID from the server.\" + (\" Falling back to the measurement ID \" + measurementId) + (\" provided in the \\\"measurementId\\\" field in the local Firebase config. [\" + e_1.message + \"]\"));\n            return [2 /*return*/, {\n              appId: appId,\n              measurementId: measurementId\n            }];\n          }\n          throw e_1;\n        case 4:\n          _b.trys.push([4, 6,, 7]);\n          return [4 /*yield*/, fetchDynamicConfig(appFields)];\n        case 5:\n          response = _b.sent();\n          // Note the SDK only clears throttle state if response is success or non-retriable.\n          retryData.deleteThrottleMetadata(appId);\n          return [2 /*return*/, response];\n        case 6:\n          e_2 = _b.sent();\n          if (!isRetriableError(e_2)) {\n            retryData.deleteThrottleMetadata(appId);\n            if (measurementId) {\n              logger.warn(\"Failed to fetch this Firebase app's measurement ID from the server.\" + (\" Falling back to the measurement ID \" + measurementId) + (\" provided in the \\\"measurementId\\\" field in the local Firebase config. [\" + e_2.message + \"]\"));\n              return [2 /*return*/, {\n                appId: appId,\n                measurementId: measurementId\n              }];\n            } else {\n              throw e_2;\n            }\n          }\n          backoffMillis = Number(e_2.customData.httpStatus) === 503 ? Object(util_dist_index_esm[\"j\" /* calculateBackoffMillis */])(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR) : Object(util_dist_index_esm[\"j\" /* calculateBackoffMillis */])(backoffCount, retryData.intervalMillis);\n          throttleMetadata = {\n            throttleEndTimeMillis: Date.now() + backoffMillis,\n            backoffCount: backoffCount + 1\n          };\n          // Persists state.\n          retryData.setThrottleMetadata(appId, throttleMetadata);\n          logger.debug(\"Calling attemptFetch again in \" + backoffMillis + \" millis\");\n          return [2 /*return*/, attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData)];\n        case 7:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * Supports waiting on a backoff by:\r\n *\r\n * <ul>\r\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\r\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\r\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\r\n *       request appear the same.</li>\r\n * </ul>\r\n *\r\n * <p>Visible for testing.\r\n */\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\n  return new Promise(function (resolve, reject) {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    var backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n    var timeout = setTimeout(resolve, backoffMillis);\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(function () {\n      clearTimeout(timeout);\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(ERROR_FACTORY.create(\"fetch-throttle\" /* FETCH_THROTTLE */, {\n        throttleEndTimeMillis: throttleEndTimeMillis\n      }));\n    });\n  });\n}\n/**\r\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\r\n */\nfunction isRetriableError(e) {\n  if (!(e instanceof util_dist_index_esm[\"c\" /* FirebaseError */]) || !e.customData) {\n    return false;\n  }\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  var httpStatus = Number(e.customData['httpStatus']);\n  return httpStatus === 429 || httpStatus === 500 || httpStatus === 503 || httpStatus === 504;\n}\n/**\r\n * Shims a minimal AbortSignal (copied from Remote Config).\r\n *\r\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\r\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\r\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\r\n * swapped out if/when we do.\r\n */\nvar AnalyticsAbortSignal = /** @class */function () {\n  function AnalyticsAbortSignal() {\n    this.listeners = [];\n  }\n  AnalyticsAbortSignal.prototype.addEventListener = function (listener) {\n    this.listeners.push(listener);\n  };\n  AnalyticsAbortSignal.prototype.abort = function () {\n    this.listeners.forEach(function (listener) {\n      return listener();\n    });\n  };\n  return AnalyticsAbortSignal;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction validateIndexedDB() {\n  return Object(tslib_es6[\"e\" /* __awaiter */])(this, void 0, void 0, function () {\n    var e_1;\n    return Object(tslib_es6[\"g\" /* __generator */])(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!!Object(util_dist_index_esm[\"y\" /* isIndexedDBAvailable */])()) return [3 /*break*/, 1];\n          logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* INDEXEDDB_UNAVAILABLE */, {\n            errorInfo: 'IndexedDB is not available in this environment.'\n          }).message);\n          return [2 /*return*/, false];\n        case 1:\n          _a.trys.push([1, 3,, 4]);\n          return [4 /*yield*/, Object(util_dist_index_esm[\"Q\" /* validateIndexedDBOpenable */])()];\n        case 2:\n          _a.sent();\n          return [3 /*break*/, 4];\n        case 3:\n          e_1 = _a.sent();\n          logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* INDEXEDDB_UNAVAILABLE */, {\n            errorInfo: e_1\n          }).message);\n          return [2 /*return*/, false];\n        case 4:\n          return [2 /*return*/, true];\n      }\n    });\n  });\n}\n/**\r\n * Initialize the analytics instance in gtag.js by calling config command with fid.\r\n *\r\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\r\n * part of the `page_view` event that's sent during the initialization\r\n * @param app Firebase app\r\n * @param gtagCore The gtag function that's not wrapped.\r\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\r\n * @param measurementIdToAppId Maps measurementID to appID.\r\n * @param installations FirebaseInstallations instance.\r\n *\r\n * @returns Measurement ID.\r\n */\nfunction initializeIds(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCore, dataLayerName) {\n  return Object(tslib_es6[\"e\" /* __awaiter */])(this, void 0, void 0, function () {\n    var dynamicConfigPromise, fidPromise, _a, dynamicConfig, fid, configProperties;\n    var _b;\n    return Object(tslib_es6[\"g\" /* __generator */])(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\n          // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n          dynamicConfigPromise.then(function (config) {\n            measurementIdToAppId[config.measurementId] = config.appId;\n            if (app.options.measurementId && config.measurementId !== app.options.measurementId) {\n              logger.warn(\"The measurement ID in the local Firebase config (\" + app.options.measurementId + \")\" + (\" does not match the measurement ID fetched from the server (\" + config.measurementId + \").\") + \" To ensure analytics events are always sent to the correct Analytics property,\" + \" update the\" + \" measurement ID field in the local config or remove it from the local config.\");\n            }\n          }).catch(function (e) {\n            return logger.error(e);\n          });\n          // Add to list to track state of all dynamic config promises.\n          dynamicConfigPromisesList.push(dynamicConfigPromise);\n          fidPromise = validateIndexedDB().then(function (envIsValid) {\n            if (envIsValid) {\n              return installations.getId();\n            } else {\n              return undefined;\n            }\n          });\n          return [4 /*yield*/, Promise.all([dynamicConfigPromise, fidPromise])];\n        case 1:\n          _a = _c.sent(), dynamicConfig = _a[0], fid = _a[1];\n          // Detect if user has already put the gtag <script> tag on this page.\n          if (!findGtagScriptOnPage()) {\n            insertScriptTag(dataLayerName, dynamicConfig.measurementId);\n          }\n          // This command initializes gtag.js and only needs to be called once for the entire web app,\n          // but since it is idempotent, we can call it multiple times.\n          // We keep it together with other initialization logic for better code structure.\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          gtagCore('js', new Date());\n          configProperties = (_b = {},\n          // guard against developers accidentally setting properties with prefix `firebase_`\n          _b[ORIGIN_KEY] = 'firebase', _b.update = true, _b);\n          if (fid != null) {\n            configProperties[GA_FID_KEY] = fid;\n          }\n          // It should be the first config command called on this GA-ID\n          // Initialize this GA-ID and set FID on it using the gtag config API.\n          // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\n          // `configProperties`.\n          gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);\n          return [2 /*return*/, dynamicConfig.measurementId];\n      }\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\r\n * all or some of these, depending on the call's `send_to` param and the status\r\n * of the dynamic config fetches (see below).\r\n */\nvar index_esm_initializationPromisesMap = {};\n/**\r\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\r\n * wait on all these to be complete in order to determine if it can selectively\r\n * wait for only certain initialization (FID) promises or if it must wait for all.\r\n */\nvar index_esm_dynamicConfigPromisesList = [];\n/**\r\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\r\n * fetch completes. If already populated, gtag config calls can use this to\r\n * selectively wait for only this app's initialization promise (FID) instead of all\r\n * initialization promises.\r\n */\nvar index_esm_measurementIdToAppId = {};\n/**\r\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\r\n */\nvar index_esm_dataLayerName = 'dataLayer';\n/**\r\n * Name for window global gtag function used by GA: defaults to 'gtag'.\r\n */\nvar gtagName = 'gtag';\n/**\r\n * Reproduction of standard gtag function or reference to existing\r\n * gtag function on window object.\r\n */\nvar gtagCoreFunction;\n/**\r\n * Wrapper around gtag function that ensures FID is sent with all\r\n * relevant event and config calls.\r\n */\nvar wrappedGtagFunction;\n/**\r\n * Flag to ensure page initialization steps (creation or wrapping of\r\n * dataLayer and gtag script) are only run once per page load.\r\n */\nvar globalInitDone = false;\n/**\r\n * For testing\r\n */\nfunction resetGlobalVars(newGlobalInitDone, newInitializationPromisesMap, newDynamicPromises) {\n  if (newGlobalInitDone === void 0) {\n    newGlobalInitDone = false;\n  }\n  if (newInitializationPromisesMap === void 0) {\n    newInitializationPromisesMap = {};\n  }\n  if (newDynamicPromises === void 0) {\n    newDynamicPromises = [];\n  }\n  globalInitDone = newGlobalInitDone;\n  index_esm_initializationPromisesMap = newInitializationPromisesMap;\n  index_esm_dynamicConfigPromisesList = newDynamicPromises;\n  index_esm_dataLayerName = 'dataLayer';\n  gtagName = 'gtag';\n}\n/**\r\n * For testing\r\n */\nfunction getGlobalVars() {\n  return {\n    initializationPromisesMap: index_esm_initializationPromisesMap,\n    dynamicConfigPromisesList: index_esm_dynamicConfigPromisesList\n  };\n}\n/**\r\n * This must be run before calling firebase.analytics() or it won't\r\n * have any effect.\r\n * @param options Custom gtag and dataLayer names.\r\n */\nfunction settings(options) {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(\"already-initialized\" /* ALREADY_INITIALIZED */);\n  }\n\n  if (options.dataLayerName) {\n    index_esm_dataLayerName = options.dataLayerName;\n  }\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n/**\r\n * Returns true if no environment mismatch is found.\r\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\r\n * error that also lists details for each mismatch found.\r\n */\nfunction warnOnBrowserContextMismatch() {\n  var mismatchedEnvMessages = [];\n  if (Object(util_dist_index_esm[\"u\" /* isBrowserExtension */])()) {\n    mismatchedEnvMessages.push('This is a browser extension environment.');\n  }\n  if (!Object(util_dist_index_esm[\"e\" /* areCookiesEnabled */])()) {\n    mismatchedEnvMessages.push('Cookies are not available.');\n  }\n  if (mismatchedEnvMessages.length > 0) {\n    var details = mismatchedEnvMessages.map(function (message, index) {\n      return \"(\" + (index + 1) + \") \" + message;\n    }).join(' ');\n    var err = ERROR_FACTORY.create(\"invalid-analytics-context\" /* INVALID_ANALYTICS_CONTEXT */, {\n      errorInfo: details\n    });\n    logger.warn(err.message);\n  }\n}\nfunction factory(app, installations) {\n  warnOnBrowserContextMismatch();\n  var appId = app.options.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(\"no-app-id\" /* NO_APP_ID */);\n  }\n\n  if (!app.options.apiKey) {\n    if (app.options.measurementId) {\n      logger.warn(\"The \\\"apiKey\\\" field is empty in the local Firebase config. This is needed to fetch the latest\" + (\" measurement ID for this Firebase app. Falling back to the measurement ID \" + app.options.measurementId) + \" provided in the \\\"measurementId\\\" field in the local Firebase config.\");\n    } else {\n      throw ERROR_FACTORY.create(\"no-api-key\" /* NO_API_KEY */);\n    }\n  }\n\n  if (index_esm_initializationPromisesMap[appId] != null) {\n    throw ERROR_FACTORY.create(\"already-exists\" /* ALREADY_EXISTS */, {\n      id: appId\n    });\n  }\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n    getOrCreateDataLayer(index_esm_dataLayerName);\n    var _a = wrapOrCreateGtag(index_esm_initializationPromisesMap, index_esm_dynamicConfigPromisesList, index_esm_measurementIdToAppId, index_esm_dataLayerName, gtagName),\n      wrappedGtag = _a.wrappedGtag,\n      gtagCore = _a.gtagCore;\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n    globalInitDone = true;\n  }\n  // Async but non-blocking.\n  // This map reflects the completion state of all promises for each appId.\n  index_esm_initializationPromisesMap[appId] = initializeIds(app, index_esm_dynamicConfigPromisesList, index_esm_measurementIdToAppId, installations, gtagCoreFunction, index_esm_dataLayerName);\n  var analyticsInstance = {\n    app: app,\n    // Public methods return void for API simplicity and to better match gtag,\n    // while internal implementations return promises.\n    logEvent: function logEvent(eventName, eventParams, options) {\n      _logEvent(wrappedGtagFunction, index_esm_initializationPromisesMap[appId], eventName, eventParams, options).catch(function (e) {\n        return logger.error(e);\n      });\n    },\n    setCurrentScreen: function setCurrentScreen(screenName, options) {\n      _setCurrentScreen(wrappedGtagFunction, index_esm_initializationPromisesMap[appId], screenName, options).catch(function (e) {\n        return logger.error(e);\n      });\n    },\n    setUserId: function setUserId(id, options) {\n      _setUserId(wrappedGtagFunction, index_esm_initializationPromisesMap[appId], id, options).catch(function (e) {\n        return logger.error(e);\n      });\n    },\n    setUserProperties: function setUserProperties(properties, options) {\n      _setUserProperties(wrappedGtagFunction, index_esm_initializationPromisesMap[appId], properties, options).catch(function (e) {\n        return logger.error(e);\n      });\n    },\n    setAnalyticsCollectionEnabled: function setAnalyticsCollectionEnabled(enabled) {\n      _setAnalyticsCollectionEnabled(index_esm_initializationPromisesMap[appId], enabled).catch(function (e) {\n        return logger.error(e);\n      });\n    },\n    INTERNAL: {\n      delete: function _delete() {\n        delete index_esm_initializationPromisesMap[appId];\n        return Promise.resolve();\n      }\n    }\n  };\n  return analyticsInstance;\n}\nvar index_esm_name = \"@firebase/analytics\";\nvar version = \"0.6.18\";\n\n/**\r\n * Type constant for Firebase Analytics.\r\n */\nvar ANALYTICS_TYPE = 'analytics';\nfunction registerAnalytics(instance) {\n  instance.INTERNAL.registerComponent(new component_dist_index_esm[\"a\" /* Component */](ANALYTICS_TYPE, function (container) {\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate();\n    var installations = container.getProvider('installations').getImmediate();\n    return factory(app, installations);\n  }, \"PUBLIC\" /* PUBLIC */).setServiceProps({\n    settings: settings,\n    EventName: EventName,\n    isSupported: isSupported\n  }));\n  instance.INTERNAL.registerComponent(new component_dist_index_esm[\"a\" /* Component */]('analytics-internal', internalFactory, \"PRIVATE\" /* PRIVATE */));\n  instance.registerVersion(index_esm_name, version);\n  function internalFactory(container) {\n    try {\n      var analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: analytics.logEvent\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(\"interop-component-reg-failed\" /* INTEROP_COMPONENT_REG_FAILED */, {\n        reason: e\n      });\n    }\n  }\n}\nregisterAnalytics(index_esm[\"a\" /* default */]);\n/**\r\n * this is a public static method provided to users that wraps four different checks:\r\n *\r\n * 1. check if it's not a browser extension environment.\r\n * 1. check if cookie is enabled in current browser.\r\n * 3. check if IndexedDB is supported by the browser environment.\r\n * 4. check if the current browser context is valid for using IndexedDB.\r\n *\r\n */\nfunction isSupported() {\n  return Object(tslib_es6[\"e\" /* __awaiter */])(this, void 0, void 0, function () {\n    var isDBOpenable;\n    return Object(tslib_es6[\"g\" /* __generator */])(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (Object(util_dist_index_esm[\"u\" /* isBrowserExtension */])()) {\n            return [2 /*return*/, false];\n          }\n          if (!Object(util_dist_index_esm[\"e\" /* areCookiesEnabled */])()) {\n            return [2 /*return*/, false];\n          }\n          if (!Object(util_dist_index_esm[\"y\" /* isIndexedDBAvailable */])()) {\n            return [2 /*return*/, false];\n          }\n          _a.label = 1;\n        case 1:\n          _a.trys.push([1, 3,, 4]);\n          return [4 /*yield*/, Object(util_dist_index_esm[\"Q\" /* validateIndexedDBOpenable */])()];\n        case 2:\n          isDBOpenable = _a.sent();\n          return [2 /*return*/, isDBOpenable];\n        case 3:\n          _a.sent();\n          return [2 /*return*/, false];\n        case 4:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n\n\n// CONCATENATED MODULE: ./node_modules/firebase/analytics/dist/index.esm.js\n\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["../src/constants.ts","../src/functions.ts","../src/logger.ts","../src/helpers.ts","../src/errors.ts","../src/get-config.ts","../src/initialize-ids.ts","../src/factory.ts","../index.ts"],"names":[],"mappings":"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","file":"x","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Key to attach FID to in gtag params.\nexport const GA_FID_KEY = 'firebase_id';\nexport const ORIGIN_KEY = 'origin';\n\nexport const FETCH_TIMEOUT_MILLIS = 60 * 1000;\n\nexport const DYNAMIC_CONFIG_URL =\n  'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\n\nexport const GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n\nexport enum GtagCommand {\n  EVENT = 'event',\n  SET = 'set',\n  CONFIG = 'config'\n}\n\n/**\n * Officially recommended event names for gtag.js\n * Any other string is also allowed.\n *\n * @public\n */\nexport enum EventName {\n  ADD_SHIPPING_INFO = 'add_shipping_info',\n  ADD_PAYMENT_INFO = 'add_payment_info',\n  ADD_TO_CART = 'add_to_cart',\n  ADD_TO_WISHLIST = 'add_to_wishlist',\n  BEGIN_CHECKOUT = 'begin_checkout',\n  /**\n   * @deprecated\n   * This event name is deprecated and is unsupported in updated\n   * Enhanced Ecommerce reports.\n   */\n  CHECKOUT_PROGRESS = 'checkout_progress',\n  EXCEPTION = 'exception',\n  GENERATE_LEAD = 'generate_lead',\n  LOGIN = 'login',\n  PAGE_VIEW = 'page_view',\n  PURCHASE = 'purchase',\n  REFUND = 'refund',\n  REMOVE_FROM_CART = 'remove_from_cart',\n  SCREEN_VIEW = 'screen_view',\n  SEARCH = 'search',\n  SELECT_CONTENT = 'select_content',\n  SELECT_ITEM = 'select_item',\n  SELECT_PROMOTION = 'select_promotion',\n  /** @deprecated */\n  SET_CHECKOUT_OPTION = 'set_checkout_option',\n  SHARE = 'share',\n  SIGN_UP = 'sign_up',\n  TIMING_COMPLETE = 'timing_complete',\n  VIEW_CART = 'view_cart',\n  VIEW_ITEM = 'view_item',\n  VIEW_ITEM_LIST = 'view_item_list',\n  VIEW_PROMOTION = 'view_promotion',\n  VIEW_SEARCH_RESULTS = 'view_search_results'\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnalyticsCallOptions,\n  Gtag,\n  CustomParams,\n  ControlParams,\n  EventParams\n} from '@firebase/analytics-types';\nimport { GtagCommand } from './constants';\n/**\n * Logs an analytics event through the Firebase SDK.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\n * @param eventParams Analytics event parameters.\n */\nexport async function logEvent(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.EVENT, eventName, eventParams);\n    return;\n  } else {\n    const measurementId = await initializationPromise;\n    const params: EventParams | ControlParams = {\n      ...eventParams,\n      'send_to': measurementId\n    };\n    gtagFunction(GtagCommand.EVENT, eventName, params);\n  }\n}\n\n/**\n * Set screen_name parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param screenName Screen name string to set.\n */\nexport async function setCurrentScreen(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  screenName: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'screen_name': screenName });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'screen_name': screenName\n    });\n  }\n}\n\n/**\n * Set user_id parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param id User ID string to set\n */\nexport async function setUserId(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  id: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'user_id': id });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_id': id\n    });\n  }\n}\n\n/**\n * Set all other user properties other than user_id and screen_name.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param properties Map of user properties to set\n */\nexport async function setUserProperties(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    const flatProperties: { [key: string]: unknown } = {};\n    for (const key of Object.keys(properties)) {\n      // use dot notation for merge behavior in gtag.js\n      flatProperties[`user_properties.${key}`] = properties[key];\n    }\n    gtagFunction(GtagCommand.SET, flatProperties);\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_properties': properties\n    });\n  }\n}\n\n/**\n * Set whether collection is enabled for this ID.\n *\n * @param enabled If true, collection is enabled for this ID.\n */\nexport async function setAnalyticsCollectionEnabled(\n  initializationPromise: Promise<string>,\n  enabled: boolean\n): Promise<void> {\n  const measurementId = await initializationPromise;\n  window[`ga-disable-${measurementId}`] = !enabled;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/analytics');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DynamicConfig,\n  DataLayer,\n  Gtag,\n  CustomParams,\n  ControlParams,\n  EventParams,\n  MinimalDynamicConfig\n} from '@firebase/analytics-types';\nimport { GtagCommand, GTAG_URL } from './constants';\nimport { logger } from './logger';\n\n/**\n * Inserts gtag script tag into the page to asynchronously download gtag.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function insertScriptTag(\n  dataLayerName: string,\n  measurementId: string\n): void {\n  const script = document.createElement('script');\n  script.src = `${GTAG_URL}?l=${dataLayerName}&id=${measurementId}`;\n  script.async = true;\n  document.head.appendChild(script);\n}\n\n/**\n * Get reference to, or create, global datalayer.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function getOrCreateDataLayer(dataLayerName: string): DataLayer {\n  // Check for existing dataLayer and create if needed.\n  let dataLayer: DataLayer = [];\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName] as DataLayer;\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n  return dataLayer;\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'config' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param measurementId GA Measurement ID to set config for.\n * @param gtagParams Gtag config params to set.\n */\nasync function gtagOnConfig(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  // If config is already fetched, we know the appId and can use it to look up what FID promise we\n  /// are waiting for, and wait only on that one.\n  const correspondingAppId = measurementIdToAppId[measurementId as string];\n  try {\n    if (correspondingAppId) {\n      await initializationPromisesMap[correspondingAppId];\n    } else {\n      // If config is not fetched yet, wait for all configs (we don't know which one we need) and\n      // find the appId (if any) corresponding to this measurementId. If there is one, wait on\n      // that appId's initialization promise. If there is none, promise resolves and gtag\n      // call goes through.\n      const dynamicConfigResults = await Promise.all(dynamicConfigPromisesList);\n      const foundConfig = dynamicConfigResults.find(\n        config => config.measurementId === measurementId\n      );\n      if (foundConfig) {\n        await initializationPromisesMap[foundConfig.appId];\n      }\n    }\n  } catch (e) {\n    logger.error(e);\n  }\n  gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'event' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementId GA Measurement ID to log event to.\n * @param gtagParams Params to log with this event.\n */\nasync function gtagOnEvent(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  try {\n    let initializationPromisesToWaitFor: Array<Promise<string>> = [];\n\n    // If there's a 'send_to' param, check if any ID specified matches\n    // an initializeIds() promise we are waiting for.\n    if (gtagParams && gtagParams['send_to']) {\n      let gaSendToList: string | string[] = gtagParams['send_to'];\n      // Make it an array if is isn't, so it can be dealt with the same way.\n      if (!Array.isArray(gaSendToList)) {\n        gaSendToList = [gaSendToList];\n      }\n      // Checking 'send_to' fields requires having all measurement ID results back from\n      // the dynamic config fetch.\n      const dynamicConfigResults = await Promise.all(dynamicConfigPromisesList);\n      for (const sendToId of gaSendToList) {\n        // Any fetched dynamic measurement ID that matches this 'send_to' ID\n        const foundConfig = dynamicConfigResults.find(\n          config => config.measurementId === sendToId\n        );\n        const initializationPromise =\n          foundConfig && initializationPromisesMap[foundConfig.appId];\n        if (initializationPromise) {\n          initializationPromisesToWaitFor.push(initializationPromise);\n        } else {\n          // Found an item in 'send_to' that is not associated\n          // directly with an FID, possibly a group.  Empty this array,\n          // exit the loop early, and let it get populated below.\n          initializationPromisesToWaitFor = [];\n          break;\n        }\n      }\n    }\n\n    // This will be unpopulated if there was no 'send_to' field , or\n    // if not all entries in the 'send_to' field could be mapped to\n    // a FID. In these cases, wait on all pending initialization promises.\n    if (initializationPromisesToWaitFor.length === 0) {\n      initializationPromisesToWaitFor = Object.values(\n        initializationPromisesMap\n      );\n    }\n\n    // Run core gtag function with args after all relevant initialization\n    // promises have been resolved.\n    await Promise.all(initializationPromisesToWaitFor);\n    // Workaround for http://b/141370449 - third argument cannot be undefined.\n    gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});\n  } catch (e) {\n    logger.error(e);\n  }\n}\n\n/**\n * Wraps a standard gtag function with extra code to wait for completion of\n * relevant initialization promises before sending requests.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n */\nfunction wrapGtag(\n  gtagCore: Gtag,\n  /**\n   * Allows wrapped gtag calls to wait on whichever intialization promises are required,\n   * depending on the contents of the gtag params' `send_to` field, if any.\n   */\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  /**\n   * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\n   * before determining what initialization promises (which include FIDs) to wait for.\n   */\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  /**\n   * Wrapped gtag config calls can narrow down which initialization promise (with FID)\n   * to wait for if the measurementId is already fetched, by getting the corresponding appId,\n   * which is the key for the initialization promises map.\n   */\n  measurementIdToAppId: { [measurementId: string]: string }\n): Gtag {\n  /**\n   * Wrapper around gtag that ensures FID is sent with gtag calls.\n   * @param command Gtag command type.\n   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\n   * @param gtagParams Params if event is EVENT/CONFIG.\n   */\n  async function gtagWrapper(\n    command: 'config' | 'set' | 'event',\n    idOrNameOrParams: string | ControlParams,\n    gtagParams?: ControlParams & EventParams & CustomParams\n  ): Promise<void> {\n    try {\n      // If event, check that relevant initialization promises have completed.\n      if (command === GtagCommand.EVENT) {\n        // If EVENT, second arg must be measurementId.\n        await gtagOnEvent(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          idOrNameOrParams as string,\n          gtagParams\n        );\n      } else if (command === GtagCommand.CONFIG) {\n        // If CONFIG, second arg must be measurementId.\n        await gtagOnConfig(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          measurementIdToAppId,\n          idOrNameOrParams as string,\n          gtagParams\n        );\n      } else {\n        // If SET, second arg must be params.\n        gtagCore(GtagCommand.SET, idOrNameOrParams as CustomParams);\n      }\n    } catch (e) {\n      logger.error(e);\n    }\n  }\n  return gtagWrapper;\n}\n\n/**\n * Creates global gtag function or wraps existing one if found.\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\n * 'event' calls that belong to the GAID associated with this Firebase instance.\n *\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param dataLayerName Name of global GA datalayer array.\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\n */\nexport function wrapOrCreateGtag(\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  dataLayerName: string,\n  gtagFunctionName: string\n): {\n  gtagCore: Gtag;\n  wrappedGtag: Gtag;\n} {\n  // Create a basic core gtag function\n  let gtagCore: Gtag = function (..._args: unknown[]) {\n    // Must push IArguments object, not an array.\n    (window[dataLayerName] as DataLayer).push(arguments);\n  };\n\n  // Replace it with existing one if found\n  if (\n    window[gtagFunctionName] &&\n    typeof window[gtagFunctionName] === 'function'\n  ) {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n\n  window[gtagFunctionName] = wrapGtag(\n    gtagCore,\n    initializationPromisesMap,\n    dynamicConfigPromisesList,\n    measurementIdToAppId\n  );\n\n  return {\n    gtagCore,\n    wrappedGtag: window[gtagFunctionName] as Gtag\n  };\n}\n\n/**\n * Returns first script tag in DOM matching our gtag url pattern.\n */\nexport function findGtagScriptOnPage(): HTMLScriptElement | null {\n  const scriptTags = window.document.getElementsByTagName('script');\n  for (const tag of Object.values(scriptTags)) {\n    if (tag.src && tag.src.includes(GTAG_URL)) {\n      return tag;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AnalyticsError {\n  ALREADY_EXISTS = 'already-exists',\n  ALREADY_INITIALIZED = 'already-initialized',\n  INTEROP_COMPONENT_REG_FAILED = 'interop-component-reg-failed',\n  INVALID_ANALYTICS_CONTEXT = 'invalid-analytics-context',\n  INDEXEDDB_UNAVAILABLE = 'indexeddb-unavailable',\n  FETCH_THROTTLE = 'fetch-throttle',\n  CONFIG_FETCH_FAILED = 'config-fetch-failed',\n  NO_API_KEY = 'no-api-key',\n  NO_APP_ID = 'no-app-id'\n}\n\nconst ERRORS: ErrorMap<AnalyticsError> = {\n  [AnalyticsError.ALREADY_EXISTS]:\n    'A Firebase Analytics instance with the appId {$id} ' +\n    ' already exists. ' +\n    'Only one Firebase Analytics instance can be created for each appId.',\n  [AnalyticsError.ALREADY_INITIALIZED]:\n    'Firebase Analytics has already been initialized.' +\n    'settings() must be called before initializing any Analytics instance' +\n    'or it will have no effect.',\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]:\n    'Firebase Analytics Interop Component failed to instantiate: {$reason}',\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]:\n    'Firebase Analytics is not supported in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]:\n    'IndexedDB unavailable or restricted in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.FETCH_THROTTLE]:\n    'The config fetch request timed out while in an exponential backoff state.' +\n    ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [AnalyticsError.CONFIG_FETCH_FAILED]:\n    'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',\n  [AnalyticsError.NO_API_KEY]:\n    'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid API key.',\n  [AnalyticsError.NO_APP_ID]:\n    'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid app ID.'\n};\n\ninterface ErrorParams {\n  [AnalyticsError.ALREADY_EXISTS]: { id: string };\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]: { reason: Error };\n  [AnalyticsError.FETCH_THROTTLE]: { throttleEndTimeMillis: number };\n  [AnalyticsError.CONFIG_FETCH_FAILED]: {\n    httpStatus: number;\n    responseMessage: string;\n  };\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]: { errorInfo: string };\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]: { errorInfo: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AnalyticsError, ErrorParams>(\n  'analytics',\n  'Analytics',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Most logic is copied from packages/remote-config/src/client/retrying_client.ts\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  DynamicConfig,\n  ThrottleMetadata,\n  MinimalDynamicConfig\n} from '@firebase/analytics-types';\nimport { FirebaseError, calculateBackoffMillis } from '@firebase/util';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { DYNAMIC_CONFIG_URL, FETCH_TIMEOUT_MILLIS } from './constants';\nimport { logger } from './logger';\n\n// App config fields needed by analytics.\nexport interface AppFields {\n  appId: string;\n  apiKey: string;\n  measurementId?: string;\n}\n\n/**\n * Backoff factor for 503 errors, which we want to be conservative about\n * to avoid overloading servers. Each retry interval will be\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\n * will be ~30 seconds (with fuzzing).\n */\nexport const LONG_RETRY_FACTOR = 30;\n\n/**\n * Base wait interval to multiplied by backoffFactor^backoffCount.\n */\nconst BASE_INTERVAL_MILLIS = 1000;\n\n/**\n * Stubbable retry data storage class.\n */\nclass RetryData {\n  constructor(\n    public throttleMetadata: { [appId: string]: ThrottleMetadata } = {},\n    public intervalMillis: number = BASE_INTERVAL_MILLIS\n  ) {}\n\n  getThrottleMetadata(appId: string): ThrottleMetadata {\n    return this.throttleMetadata[appId];\n  }\n\n  setThrottleMetadata(appId: string, metadata: ThrottleMetadata): void {\n    this.throttleMetadata[appId] = metadata;\n  }\n\n  deleteThrottleMetadata(appId: string): void {\n    delete this.throttleMetadata[appId];\n  }\n}\n\nconst defaultRetryData = new RetryData();\n\n/**\n * Set GET request headers.\n * @param apiKey App API key.\n */\nfunction getHeaders(apiKey: string): Headers {\n  return new Headers({\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\n/**\n * Fetches dynamic config from backend.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfig(\n  appFields: AppFields\n): Promise<DynamicConfig> {\n  const { appId, apiKey } = appFields;\n  const request: RequestInit = {\n    method: 'GET',\n    headers: getHeaders(apiKey)\n  };\n  const appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\n  const response = await fetch(appUrl, request);\n  if (response.status !== 200 && response.status !== 304) {\n    let errorMessage = '';\n    try {\n      // Try to get any error message text from server response.\n      const jsonResponse = (await response.json()) as {\n        error?: { message?: string };\n      };\n      if (jsonResponse.error?.message) {\n        errorMessage = jsonResponse.error.message;\n      }\n    } catch (_ignored) {}\n    throw ERROR_FACTORY.create(AnalyticsError.CONFIG_FETCH_FAILED, {\n      httpStatus: response.status,\n      responseMessage: errorMessage\n    });\n  }\n  return response.json();\n}\n\n/**\n * Fetches dynamic config from backend, retrying if failed.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfigWithRetry(\n  app: FirebaseApp,\n  // retryData and timeoutMillis are parameterized to allow passing a different value for testing.\n  retryData: RetryData = defaultRetryData,\n  timeoutMillis?: number\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, apiKey, measurementId } = app.options;\n\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n\n  if (!apiKey) {\n    if (measurementId) {\n      return {\n        measurementId,\n        appId\n      };\n    }\n    throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n  }\n\n  const throttleMetadata: ThrottleMetadata = retryData.getThrottleMetadata(\n    appId\n  ) || {\n    backoffCount: 0,\n    throttleEndTimeMillis: Date.now()\n  };\n\n  const signal = new AnalyticsAbortSignal();\n\n  setTimeout(\n    async () => {\n      // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n      signal.abort();\n    },\n    timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS\n  );\n\n  return attemptFetchDynamicConfigWithRetry(\n    { appId, apiKey, measurementId },\n    throttleMetadata,\n    signal,\n    retryData\n  );\n}\n\n/**\n * Runs one retry attempt.\n * @param appFields Necessary app config fields.\n * @param throttleMetadata Ongoing metadata to determine throttling times.\n * @param signal Abort signal.\n */\nasync function attemptFetchDynamicConfigWithRetry(\n  appFields: AppFields,\n  { throttleEndTimeMillis, backoffCount }: ThrottleMetadata,\n  signal: AnalyticsAbortSignal,\n  retryData: RetryData = defaultRetryData // for testing\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, measurementId } = appFields;\n  // Starts with a (potentially zero) timeout to support resumption from stored state.\n  // Ensures the throttle end time is honored if the last attempt timed out.\n  // Note the SDK will never make a request if the fetch timeout expires at this point.\n  try {\n    await setAbortableTimeout(signal, throttleEndTimeMillis);\n  } catch (e) {\n    if (measurementId) {\n      logger.warn(\n        `Timed out fetching this Firebase app's measurement ID from the server.` +\n          ` Falling back to the measurement ID ${measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config. [${e.message}]`\n      );\n      return { appId, measurementId };\n    }\n    throw e;\n  }\n\n  try {\n    const response = await fetchDynamicConfig(appFields);\n\n    // Note the SDK only clears throttle state if response is success or non-retriable.\n    retryData.deleteThrottleMetadata(appId);\n\n    return response;\n  } catch (e) {\n    if (!isRetriableError(e)) {\n      retryData.deleteThrottleMetadata(appId);\n      if (measurementId) {\n        logger.warn(\n          `Failed to fetch this Firebase app's measurement ID from the server.` +\n            ` Falling back to the measurement ID ${measurementId}` +\n            ` provided in the \"measurementId\" field in the local Firebase config. [${e.message}]`\n        );\n        return { appId, measurementId };\n      } else {\n        throw e;\n      }\n    }\n\n    const backoffMillis =\n      Number(e.customData.httpStatus) === 503\n        ? calculateBackoffMillis(\n            backoffCount,\n            retryData.intervalMillis,\n            LONG_RETRY_FACTOR\n          )\n        : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\n\n    // Increments backoff state.\n    const throttleMetadata = {\n      throttleEndTimeMillis: Date.now() + backoffMillis,\n      backoffCount: backoffCount + 1\n    };\n\n    // Persists state.\n    retryData.setThrottleMetadata(appId, throttleMetadata);\n    logger.debug(`Calling attemptFetch again in ${backoffMillis} millis`);\n\n    return attemptFetchDynamicConfigWithRetry(\n      appFields,\n      throttleMetadata,\n      signal,\n      retryData\n    );\n  }\n}\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nfunction setAbortableTimeout(\n  signal: AnalyticsAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(AnalyticsError.FETCH_THROTTLE, {\n          throttleEndTimeMillis\n        })\n      );\n    });\n  });\n}\n\ntype RetriableError = FirebaseError & { customData: { httpStatus: string } };\n\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): e is RetriableError {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e.customData['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Shims a minimal AbortSignal (copied from Remote Config).\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class AnalyticsAbortSignal {\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void {\n    this.listeners.push(listener);\n  }\n  abort(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DynamicConfig,\n  Gtag,\n  MinimalDynamicConfig\n} from '@firebase/analytics-types';\nimport { GtagCommand, GA_FID_KEY, ORIGIN_KEY } from './constants';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { fetchDynamicConfigWithRetry } from './get-config';\nimport { logger } from './logger';\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\nimport { findGtagScriptOnPage, insertScriptTag } from './helpers';\n\nasync function validateIndexedDB(): Promise<boolean> {\n  if (!isIndexedDBAvailable()) {\n    logger.warn(\n      ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n        errorInfo: 'IndexedDB is not available in this environment.'\n      }).message\n    );\n    return false;\n  } else {\n    try {\n      await validateIndexedDBOpenable();\n    } catch (e) {\n      logger.warn(\n        ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n          errorInfo: e\n        }).message\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Initialize the analytics instance in gtag.js by calling config command with fid.\n *\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\n * part of the `page_view` event that's sent during the initialization\n * @param app Firebase app\n * @param gtagCore The gtag function that's not wrapped.\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\n * @param measurementIdToAppId Maps measurementID to appID.\n * @param installations FirebaseInstallations instance.\n *\n * @returns Measurement ID.\n */\nexport async function initializeIds(\n  app: FirebaseApp,\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [key: string]: string },\n  installations: FirebaseInstallations,\n  gtagCore: Gtag,\n  dataLayerName: string\n): Promise<string> {\n  const dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\n  // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n  dynamicConfigPromise\n    .then(config => {\n      measurementIdToAppId[config.measurementId] = config.appId;\n      if (\n        app.options.measurementId &&\n        config.measurementId !== app.options.measurementId\n      ) {\n        logger.warn(\n          `The measurement ID in the local Firebase config (${app.options.measurementId})` +\n            ` does not match the measurement ID fetched from the server (${config.measurementId}).` +\n            ` To ensure analytics events are always sent to the correct Analytics property,` +\n            ` update the` +\n            ` measurement ID field in the local config or remove it from the local config.`\n        );\n      }\n    })\n    .catch(e => logger.error(e));\n  // Add to list to track state of all dynamic config promises.\n  dynamicConfigPromisesList.push(dynamicConfigPromise);\n\n  const fidPromise: Promise<string | undefined> = validateIndexedDB().then(\n    envIsValid => {\n      if (envIsValid) {\n        return installations.getId();\n      } else {\n        return undefined;\n      }\n    }\n  );\n\n  const [dynamicConfig, fid] = await Promise.all([\n    dynamicConfigPromise,\n    fidPromise\n  ]);\n\n  // Detect if user has already put the gtag <script> tag on this page.\n  if (!findGtagScriptOnPage()) {\n    insertScriptTag(dataLayerName, dynamicConfig.measurementId);\n  }\n\n  // This command initializes gtag.js and only needs to be called once for the entire web app,\n  // but since it is idempotent, we can call it multiple times.\n  // We keep it together with other initialization logic for better code structure.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  gtagCore('js' as any, new Date());\n\n  const configProperties: { [key: string]: string | boolean } = {\n    // guard against developers accidentally setting properties with prefix `firebase_`\n    [ORIGIN_KEY]: 'firebase',\n    update: true\n  };\n\n  if (fid != null) {\n    configProperties[GA_FID_KEY] = fid;\n  }\n\n  // It should be the first config command called on this GA-ID\n  // Initialize this GA-ID and set FID on it using the gtag config API.\n  // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\n  // `configProperties`.\n  gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);\n  return dynamicConfig.measurementId;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseAnalytics,\n  Gtag,\n  SettingsOptions,\n  DynamicConfig,\n  MinimalDynamicConfig,\n  AnalyticsCallOptions,\n  CustomParams,\n  EventParams\n} from '@firebase/analytics-types';\nimport {\n  logEvent,\n  setCurrentScreen,\n  setUserId,\n  setUserProperties,\n  setAnalyticsCollectionEnabled\n} from './functions';\nimport { getOrCreateDataLayer, wrapOrCreateGtag } from './helpers';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { areCookiesEnabled, isBrowserExtension } from '@firebase/util';\nimport { initializeIds } from './initialize-ids';\nimport { logger } from './logger';\nimport { FirebaseService } from '@firebase/app-types/private';\n\ninterface FirebaseAnalyticsInternal\n  extends FirebaseAnalytics,\n    FirebaseService {}\n\n/**\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\n * all or some of these, depending on the call's `send_to` param and the status\n * of the dynamic config fetches (see below).\n */\nlet initializationPromisesMap: {\n  [appId: string]: Promise<string>; // Promise contains measurement ID string.\n} = {};\n\n/**\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\n * wait on all these to be complete in order to determine if it can selectively\n * wait for only certain initialization (FID) promises or if it must wait for all.\n */\nlet dynamicConfigPromisesList: Array<\n  Promise<DynamicConfig | MinimalDynamicConfig>\n> = [];\n\n/**\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\n * fetch completes. If already populated, gtag config calls can use this to\n * selectively wait for only this app's initialization promise (FID) instead of all\n * initialization promises.\n */\nconst measurementIdToAppId: { [measurementId: string]: string } = {};\n\n/**\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\n */\nlet dataLayerName: string = 'dataLayer';\n\n/**\n * Name for window global gtag function used by GA: defaults to 'gtag'.\n */\nlet gtagName: string = 'gtag';\n\n/**\n * Reproduction of standard gtag function or reference to existing\n * gtag function on window object.\n */\nlet gtagCoreFunction: Gtag;\n\n/**\n * Wrapper around gtag function that ensures FID is sent with all\n * relevant event and config calls.\n */\nlet wrappedGtagFunction: Gtag;\n\n/**\n * Flag to ensure page initialization steps (creation or wrapping of\n * dataLayer and gtag script) are only run once per page load.\n */\nlet globalInitDone: boolean = false;\n\n/**\n * For testing\n */\nexport function resetGlobalVars(\n  newGlobalInitDone = false,\n  newInitializationPromisesMap = {},\n  newDynamicPromises = []\n): void {\n  globalInitDone = newGlobalInitDone;\n  initializationPromisesMap = newInitializationPromisesMap;\n  dynamicConfigPromisesList = newDynamicPromises;\n  dataLayerName = 'dataLayer';\n  gtagName = 'gtag';\n}\n\n/**\n * For testing\n */\nexport function getGlobalVars(): {\n  initializationPromisesMap: { [appId: string]: Promise<string> };\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >;\n} {\n  return {\n    initializationPromisesMap,\n    dynamicConfigPromisesList\n  };\n}\n\n/**\n * This must be run before calling firebase.analytics() or it won't\n * have any effect.\n * @param options Custom gtag and dataLayer names.\n */\nexport function settings(options: SettingsOptions): void {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n  }\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n\n/**\n * Returns true if no environment mismatch is found.\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\n * error that also lists details for each mismatch found.\n */\nfunction warnOnBrowserContextMismatch(): void {\n  const mismatchedEnvMessages = [];\n  if (isBrowserExtension()) {\n    mismatchedEnvMessages.push('This is a browser extension environment.');\n  }\n  if (!areCookiesEnabled()) {\n    mismatchedEnvMessages.push('Cookies are not available.');\n  }\n  if (mismatchedEnvMessages.length > 0) {\n    const details = mismatchedEnvMessages\n      .map((message, index) => `(${index + 1}) ${message}`)\n      .join(' ');\n    const err = ERROR_FACTORY.create(AnalyticsError.INVALID_ANALYTICS_CONTEXT, {\n      errorInfo: details\n    });\n    logger.warn(err.message);\n  }\n}\n\nexport function factory(\n  app: FirebaseApp,\n  installations: FirebaseInstallations\n): FirebaseAnalytics {\n  warnOnBrowserContextMismatch();\n  const appId = app.options.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n  if (!app.options.apiKey) {\n    if (app.options.measurementId) {\n      logger.warn(\n        `The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest` +\n          ` measurement ID for this Firebase app. Falling back to the measurement ID ${app.options.measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config.`\n      );\n    } else {\n      throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n    }\n  }\n  if (initializationPromisesMap[appId] != null) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_EXISTS, {\n      id: appId\n    });\n  }\n\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n\n    getOrCreateDataLayer(dataLayerName);\n\n    const { wrappedGtag, gtagCore } = wrapOrCreateGtag(\n      initializationPromisesMap,\n      dynamicConfigPromisesList,\n      measurementIdToAppId,\n      dataLayerName,\n      gtagName\n    );\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n\n    globalInitDone = true;\n  }\n  // Async but non-blocking.\n  // This map reflects the completion state of all promises for each appId.\n  initializationPromisesMap[appId] = initializeIds(\n    app,\n    dynamicConfigPromisesList,\n    measurementIdToAppId,\n    installations,\n    gtagCoreFunction,\n    dataLayerName\n  );\n\n  const analyticsInstance: FirebaseAnalyticsInternal = {\n    app,\n    // Public methods return void for API simplicity and to better match gtag,\n    // while internal implementations return promises.\n    logEvent: (\n      eventName: string,\n      eventParams?: EventParams | CustomParams,\n      options?: AnalyticsCallOptions\n    ) => {\n      logEvent(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        eventName,\n        eventParams,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setCurrentScreen: (screenName, options) => {\n      setCurrentScreen(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        screenName,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setUserId: (id, options) => {\n      setUserId(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        id,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setUserProperties: (properties, options) => {\n      setUserProperties(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        properties,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setAnalyticsCollectionEnabled: enabled => {\n      setAnalyticsCollectionEnabled(\n        initializationPromisesMap[appId],\n        enabled\n      ).catch(e => logger.error(e));\n    },\n    INTERNAL: {\n      delete: (): Promise<void> => {\n        delete initializationPromisesMap[appId];\n        return Promise.resolve();\n      }\n    }\n  };\n\n  return analyticsInstance;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { FirebaseAnalytics } from '@firebase/analytics-types';\nimport { FirebaseAnalyticsInternal } from '@firebase/analytics-interop-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport {\n  factory,\n  settings,\n  resetGlobalVars,\n  getGlobalVars\n} from './src/factory';\nimport { EventName } from './src/constants';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer\n} from '@firebase/component';\nimport { ERROR_FACTORY, AnalyticsError } from './src/errors';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable,\n  areCookiesEnabled,\n  isBrowserExtension\n} from '@firebase/util';\nimport { name, version } from './package.json';\n\ndeclare global {\n  interface Window {\n    [key: string]: unknown;\n  }\n}\n\n/**\n * Type constant for Firebase Analytics.\n */\nconst ANALYTICS_TYPE = 'analytics';\n\nexport function registerAnalytics(instance: _FirebaseNamespace): void {\n  instance.INTERNAL.registerComponent(\n    new Component(\n      ANALYTICS_TYPE,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const installations = container\n          .getProvider('installations')\n          .getImmediate();\n\n        return factory(app, installations);\n      },\n      ComponentType.PUBLIC\n    ).setServiceProps({\n      settings,\n      EventName,\n      isSupported\n    })\n  );\n\n  instance.INTERNAL.registerComponent(\n    new Component('analytics-internal', internalFactory, ComponentType.PRIVATE)\n  );\n\n  instance.registerVersion(name, version);\n\n  function internalFactory(\n    container: ComponentContainer\n  ): FirebaseAnalyticsInternal {\n    try {\n      const analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: analytics.logEvent\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(AnalyticsError.INTEROP_COMPONENT_REG_FAILED, {\n        reason: e\n      });\n    }\n  }\n}\n\nexport { factory, settings, resetGlobalVars, getGlobalVars };\n\nregisterAnalytics(firebase as _FirebaseNamespace);\n\n/**\n * Define extension behavior of `registerAnalytics`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    analytics(app?: FirebaseApp): FirebaseAnalytics;\n  }\n  interface FirebaseApp {\n    analytics(): FirebaseAnalytics;\n  }\n}\n\n/**\n * this is a public static method provided to users that wraps four different checks:\n *\n * 1. check if it's not a browser extension environment.\n * 1. check if cookie is enabled in current browser.\n * 3. check if IndexedDB is supported by the browser environment.\n * 4. check if the current browser context is valid for using IndexedDB.\n *\n */\nasync function isSupported(): Promise<boolean> {\n  if (isBrowserExtension()) {\n    return false;\n  }\n  if (!areCookiesEnabled()) {\n    return false;\n  }\n  if (!isIndexedDBAvailable()) {\n    return false;\n  }\n\n  try {\n    const isDBOpenable: boolean = await validateIndexedDBOpenable();\n    return isDBOpenable;\n  } catch (error) {\n    return false;\n  }\n}\n"]},"banner":"For license information please see 7.68cdc7b9.chunk.js.LICENSE.txt","extractedComments":"/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n","commentsFilename":"static/js/7.68cdc7b9.chunk.js.LICENSE.txt"}