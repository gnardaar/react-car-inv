[{"C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\index.tsx":"1","C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\firebaseConfig.ts":"2","C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\redux\\store.ts":"3","C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\index.ts":"4","C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\redux\\slices\\RootSlice.ts":"5","C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\CarInventory\\index.ts":"6","C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\Navbar\\index.ts":"7","C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\Home\\index.ts":"8","C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\Car\\index.ts":"9","C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\About\\index.ts":"10","C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\SignIn\\index.tsx":"11","C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\Navbar\\Navbar.tsx":"12","C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\CarInventory\\CarInventory.tsx":"13","C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\Home\\Home.tsx":"14","C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\Car\\Car.tsx":"15","C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\About\\About.tsx":"16","C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\SignIn\\SignIn.tsx":"17","C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\SharedComponents\\Input.tsx":"18","C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\DataTable\\index.ts":"19","C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\CarForm\\index.ts":"20","C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\DataTable\\DataTable.tsx":"21","C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\CarForm\\CarForm.tsx":"22","C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\api\\index.ts":"23","C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\custom-hooks\\index.ts":"24","C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\api\\server.ts":"25","C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\custom-hooks\\FetchData.ts":"26"},{"size":1232,"mtime":1673017271988,"results":"27","hashOfConfig":"28"},{"size":656,"mtime":1673016569398,"results":"29","hashOfConfig":"28"},{"size":279,"mtime":1673016513229,"results":"30","hashOfConfig":"28"},{"size":159,"mtime":1673016513226,"results":"31","hashOfConfig":"28"},{"size":823,"mtime":1673016513229,"results":"32","hashOfConfig":"28"},{"size":30,"mtime":1673016513219,"results":"33","hashOfConfig":"28"},{"size":24,"mtime":1673016513223,"results":"34","hashOfConfig":"28"},{"size":22,"mtime":1673016513221,"results":"35","hashOfConfig":"28"},{"size":21,"mtime":1673016513217,"results":"36","hashOfConfig":"28"},{"size":23,"mtime":1673016513216,"results":"37","hashOfConfig":"28"},{"size":24,"mtime":1673016513225,"results":"38","hashOfConfig":"28"},{"size":3277,"mtime":1673016513222,"results":"39","hashOfConfig":"28"},{"size":8619,"mtime":1673016513218,"results":"40","hashOfConfig":"28"},{"size":1375,"mtime":1673016513221,"results":"41","hashOfConfig":"28"},{"size":198,"mtime":1673016513217,"results":"42","hashOfConfig":"28"},{"size":193,"mtime":1673016513216,"results":"43","hashOfConfig":"28"},{"size":3893,"mtime":1673016513225,"results":"44","hashOfConfig":"28"},{"size":430,"mtime":1673016513224,"results":"45","hashOfConfig":"28"},{"size":27,"mtime":1673016513220,"results":"46","hashOfConfig":"28"},{"size":25,"mtime":1673016513218,"results":"47","hashOfConfig":"28"},{"size":2634,"mtime":1673016513220,"results":"48","hashOfConfig":"28"},{"size":2684,"mtime":1673016513217,"results":"49","hashOfConfig":"28"},{"size":24,"mtime":1673016513215,"results":"50","hashOfConfig":"28"},{"size":29,"mtime":1673016513227,"results":"51","hashOfConfig":"28"},{"size":1780,"mtime":1673016513215,"results":"52","hashOfConfig":"28"},{"size":415,"mtime":1673016513227,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},"ed9xec",{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\index.tsx",["112"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport { FirebaseAppProvider,AuthCheck } from 'reactfire';\r\nimport { Home, CarInventory, Car, About,SignIn  } from './components' \r\nimport './styles.css'\r\nimport { firebaseConfig } from './firebaseConfig'\r\nimport 'firebase/auth';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './redux/store'\r\n\r\n\r\nconst temp_props = \"Andy's car app\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <FirebaseAppProvider firebaseConfig={firebaseConfig} suspense={true}>\r\n    <Provider store={store}>\r\n    <Router>\r\n      <Switch>\r\n\r\n\r\n        <Route exact path=\"/\">\r\n          <Home title={temp_props}/>\r\n        </Route>\r\n        <Route path='/carinventory'>\r\n          <CarInventory></CarInventory>\r\n        </Route>\r\n        <Route path='/car'>\r\n          <Car></Car>\r\n        </Route>\r\n        <Route path='/about'>\r\n          <About></About>\r\n        </Route>\r\n        <Route path='/signin'>\r\n          <SignIn></SignIn>\r\n        </Route>\r\n\r\n\r\n\r\n      </Switch>\r\n    </Router>\r\n    </Provider>\r\n    </FirebaseAppProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n","C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\firebaseConfig.ts",[],"C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\redux\\store.ts",[],"C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\index.ts",[],"C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\redux\\slices\\RootSlice.ts",[],"C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\CarInventory\\index.ts",[],"C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\Navbar\\index.ts",[],"C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\Home\\index.ts",[],"C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\Car\\index.ts",[],"C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\About\\index.ts",[],"C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\SignIn\\index.tsx",[],"C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\Navbar\\Navbar.tsx",["113"],"import { constants } from 'crypto'\r\nimport React, { Suspense } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Link } from \"react-router-dom\";\r\n// import Digits from '../../assets/images/digitlogo.png';\r\nimport { AuthCheck } from \"reactfire\";\r\n\r\nconst useStyles = makeStyles({\r\n  logo: {\r\n    // content: `url(${Digits})`,\r\n    maxWidth: \"20%\",\r\n    height: \"auto\",\r\n  },\r\n  navlogo: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"flex-start\",\r\n    alignItems: \"flex-start\",\r\n  },\r\n  center: {\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  column: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  row: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n  },\r\n  navbar: {\r\n    backgroundColor: \"#003155\",\r\n    zIndex: 1,\r\n    borderBottom: \"1px solid grey\",\r\n  },\r\n  navbarItem: {\r\n    color: \"white\",\r\n    textDecoration: \"none\",\r\n  },\r\n  p5: {\r\n    padding: \"5px\",\r\n  },\r\n  spaceBetween: {\r\n    justifyContent: \"space-between\",\r\n  },\r\n  alignCenter: {\r\n    alignItems: \"center\",\r\n  },\r\n  ul: {\r\n    listStyleType: \"none\",\r\n  },\r\n  width60: {\r\n    width: \"60%\",\r\n  },\r\n  width100: {\r\n    width: \"100%\",\r\n  },\r\n  psides: {\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n});\r\n\r\nexport const Navbar = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div\r\n      className={`${classes.row} ${classes.navbar} ${classes.width100} ${classes.alignCenter} ${classes.p5} ${classes.spaceBetween}`}\r\n    >\r\n      <div className={`${classes.navlogo} `}>\r\n        <Link to=\"/\" className={`${classes.logo} ${classes.p5}`}></Link>\r\n      </div>\r\n      <div className={`${classes.width60} ${classes.alignCenter}`}>\r\n        <ul\r\n          className={`${classes.ul} ${classes.row} ${classes.spaceBetween} ${classes.psides}`}\r\n        >\r\n          <Suspense fallback={\"loading...\"}>\r\n            <AuthCheck\r\n              fallback={\r\n                <li>\r\n                  <Link\r\n                    to=\"/signin\"\r\n                    className={`${classes.navbarItem} ${classes.psides}`}\r\n                  >\r\n                    Sign In\r\n                  </Link>\r\n                </li>\r\n              }\r\n            >\r\n              <li>\r\n                <Button>\r\n                  <Link\r\n                    to=\"/carinventory\"\r\n                    className={`${classes.navbarItem} ${classes.psides}`}\r\n                  >\r\n                    My Cars\r\n                  </Link>\r\n                </Button>\r\n              </li>\r\n              <li>\r\n                <Button>\r\n                  <Link\r\n                    to=\"\"\r\n                    className={`${classes.navbarItem} ${classes.psides}`}\r\n                  >\r\n                    Contact Us\r\n                  </Link>\r\n                </Button>\r\n              </li>\r\n              <li>\r\n                <Button>\r\n                  <Link\r\n                    to=\"About\"\r\n                    className={`${classes.navbarItem} ${classes.psides}`}\r\n                  >\r\n                    About Us\r\n                  </Link>\r\n                </Button>\r\n              </li>\r\n            </AuthCheck>\r\n          </Suspense>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\CarInventory\\CarInventory.tsx",["114","115","116"],"// Update styling here\r\n\r\nimport React, {useState}  from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Paper} from '@material-ui/core';\r\nimport { Drawer as MUIDrawer, \r\n    ListItem, \r\n    List, \r\n    ListItemIcon, \r\n    ListItemText, \r\n    Theme,\r\n    useTheme, \r\n    makeStyles, \r\n    createStyles,\r\n    AppBar,\r\n    Toolbar,\r\n    IconButton,\r\n    Typography,\r\n    Divider,\r\n    Button,\r\n    Dialog, \r\n    DialogActions, \r\n    DialogContent,\r\n    DialogContentText, \r\n    DialogTitle  ,\r\n} from '@material-ui/core';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\r\nimport clsx from 'clsx'; // This allows us to conditionally apply classes\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { DataTable } from '../DataTable';\r\nimport { CarForm } from '../CarForm'\r\n\r\n\r\ninterface CarInvProps{\r\n    history: RouteComponentProps[\"history\"];\r\n    location: RouteComponentProps['location'];\r\n    match: RouteComponentProps['match'];\r\n}\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    main: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5))`,\r\n        width: '100%',\r\n        height: '100%',\r\n        position: 'absolute',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        fontFamily: \"Georgia, 'Times New Roman', Times, serif\",\r\n    },\r\n    h3: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        color: 'black',\r\n    },\r\n    text: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        color: '#4ef3b4',\r\n        textDecoration: 'none',\r\n        backgroundColor: 'white',\r\n        width: '60%',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    logo:{\r\n        margin: '0 0 0 0.45em',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    logo_a: {\r\n        color: '#4ef3b4',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    logo_navigation: {\r\n        listStyle: 'none',\r\n        textTransform: 'uppercase',\r\n        textDecoration: 'none',\r\n    },\r\n    root: {\r\n      display: 'flex',\r\n    },\r\n    column: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    // begin comment\r\n    appBar: {\r\n      transition: theme.transitions.create(['margin', 'width'], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n    },\r\n    appBarShift: {\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      marginLeft: drawerWidth,\r\n      transition: theme.transitions.create(['margin', 'width'], {\r\n        easing: theme.transitions.easing.easeOut,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    // end comment\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    hide: {\r\n      display: 'none',\r\n    },\r\n    drawer: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n    // begin comment\r\n    drawerPaper: {\r\n      width: drawerWidth,\r\n    },\r\n    drawerHeader: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      padding: theme.spacing(0, 1),\r\n      // necessary for content to be below app bar\r\n      ...theme.mixins.toolbar,\r\n      justifyContent: 'flex-end',\r\n    },\r\n    content: {\r\n      flexGrow: 1,\r\n      padding: theme.spacing(3),\r\n      transition: theme.transitions.create('margin', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n      marginLeft: -drawerWidth,\r\n    },\r\n    contentShift: {\r\n      transition: theme.transitions.create('margin', {\r\n        easing: theme.transitions.easing.easeOut,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n      marginLeft: 0,\r\n    },\r\n    // end comment\r\n    toolbar:{\r\n      display: 'flex',\r\n      backgroundColor: '#003155',\r\n      color: 'white',\r\n      fontFamily: \"Georgia, 'Times New Roman', Times, serif\",\r\n    },\r\n    toolbar_button: {\r\n      marginLeft: 'auto',\r\n      color: 'white',\r\n      fontFamily: \"Georgia, 'Times New Roman', Times, serif\",\r\n    },\r\n    margin_top: {\r\n        marginTop: '50px',\r\n    },\r\n    font: {\r\n        fontFamily: \"Georgia, 'Times New Roman', Times, serif\",\r\n    },\r\n    leftMargin: {\r\n        marginLeft: '0px',\r\n    },\r\n}))\r\n\r\n\r\nexport const CarInventory = withRouter(( props:CarInvProps ) => {\r\n    console.log(props);\r\n    const { history } = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleDrawerClose = () => {\r\n        setOpen(false)\r\n    };\r\n\r\n    const handleDialogClickOpen = () => {\r\n        setDialogOpen(true)\r\n    };\r\n\r\n    const handleDialogClickClose = () => {\r\n        setDialogOpen(false)\r\n    };\r\n\r\n    const itemsList = [\r\n        {\r\n            text: 'Home',\r\n            onClick: () => history.push('/')\r\n        },\r\n        {\r\n            text: 'Sign In',\r\n            onClick: () => history.push('/signin')\r\n        },\r\n        {\r\n            text: 'About',\r\n            onClick: () => history.push('/about')\r\n        },\r\n        {\r\n            text: 'car',\r\n            onClick: () => history.push('/car')\r\n        },\r\n    ]\r\n\r\n    \r\n\r\n    return (\r\n        <div className={`${classes.root} ${classes.column}`}>\r\n            <CssBaseline />\r\n            <AppBar position=\"fixed\" className={clsx(classes.appBar, {[classes.appBarShift]: open })}>\r\n                <Toolbar className={classes.toolbar}>\r\n                    <IconButton color=\"inherit\" aria-label=\"open-drawer\" onClick={handleDrawerOpen} edge=\"start\" className={clsx(classes.menuButton, open && classes.hide)}>\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.font} noWrap>\r\n                        My Cars\r\n                    </Typography>\r\n                    <Button className={classes.toolbar_button} onClick={handleDialogClickOpen}>Add A New Car!</Button>\r\n\r\n                    {/* Dialog Pop Up */}\r\n                    <Dialog open={dialogOpen} onClose={handleDialogClickClose} aria-labelledby=\"form-dialog-title\">\r\n                        <DialogTitle id=\"form-dialog-title\">Add New car</DialogTitle>\r\n                        <DialogContent>\r\n                            <DialogContentText></DialogContentText>\r\n                            <CarForm />\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={handleDialogClickClose} color=\"primary\">Cancel</Button>\r\n                            <Button onClick={handleDialogClickOpen} color=\"primary\">Done</Button>\r\n                        </DialogActions>\r\n                    </Dialog>\r\n                    {/* End dialog pop-up */}\r\n                </Toolbar>\r\n            </AppBar>\r\n            <MUIDrawer className={classes.drawer} variant=\"persistent\" anchor=\"left\" open={open} classes={{paper: classes.drawerPaper,}}>\r\n                <div className={classes.drawerHeader}>\r\n                    <IconButton onClick={handleDrawerClose}>\r\n                        {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n                <List>\r\n                    {itemsList.map((item, index) => {\r\n                        const { text, onClick } = item;\r\n                        return (\r\n                            <ListItem button key={text} onClick={onClick}>\r\n                                <ListItemText primary={text} />\r\n                            </ListItem>\r\n                        );\r\n                    })}\r\n                </List>\r\n            </MUIDrawer>\r\n            <main className={`${clsx(classes.content, {[classes.contentShift]: open,})} ${classes.leftMargin}`}>\r\n                <div className={classes.drawerHeader} />\r\n                    <DataTable />\r\n            </main>\r\n        </div>\r\n    )\r\n});\r\n","C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\Home\\Home.tsx",[],"C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\Car\\Car.tsx",[],"C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\About\\About.tsx",[],"C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\SignIn\\SignIn.tsx",[],"C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\SharedComponents\\Input.tsx",[],"C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\DataTable\\index.ts",[],"C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\CarForm\\index.ts",[],"C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\DataTable\\DataTable.tsx",["117"],"// Need to figure out params and selection issues\r\n\r\nimport { useState } from 'react';\r\nimport { DataGrid, GridColDef } from '@material-ui/data-grid';\r\nimport { useGetData } from '../../custom-hooks';\r\nimport { server_calls } from '../../api';\r\nimport { Button, Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle } from '@material-ui/core';\r\nimport { CarForm } from '../CarForm';\r\n\r\n\r\n\r\n\r\nconst columns: GridColDef[] = [\r\n    { field: 'id', headerName: 'ID', width: 90, hide: true },\r\n    { field: 'make', headerName: 'Make', flex: 1 },\r\n    { field: 'model', headerName: 'Model', flex: 1 },\r\n    { field: 'condition', headerName: 'Car Condition', flex: 2 },\r\n    { field: 'year', headerName: 'Year', flex: 1 },\r\n];\r\n\r\ninterface gridData {\r\n    data: {\r\n        id?:string\r\n    }\r\n}\r\n\r\nexport const DataTable = () => {\r\n\r\n    let { carData, getData } = useGetData();\r\n    let [open, setOpen] = useState(false);\r\n    let [gridData, setData] = useState<gridData>({data:{}});\r\n    const [selectionModel, setSelectionModel] = useState<any>([]);\r\n    \r\n\r\n    let handleOpen = () => {\r\n        setOpen(true)\r\n    };\r\n    let handleClose = () => {\r\n        setOpen(false)\r\n    };\r\n\r\n    let deleteData = () => {\r\n        server_calls.delete(selectionModel);\r\n        // console.log(gridData.data.id);\r\n        getData();\r\n        setTimeout( () => { window.location.reload(); }, 1000)\r\n    }\r\n\r\n    console.log(gridData.data.id!);\r\n    console.log(`testing for data ${carData}`)\r\n\r\n\r\n    return (\r\n        <div style={{ height: 400, width: '100%' }}>\r\n            <h2>My Cars</h2>\r\n\r\n        <DataGrid rows={ carData } columns={ columns } pageSize={ 5 } checkboxSelection={true} \r\n        onSelectionModelChange={ (item) => {\r\n            setSelectionModel(item)\r\n          }}\r\n        />\r\n\r\n        <Button onClick={handleOpen}>Update</Button>\r\n        <Button variant=\"contained\" color=\"secondary\" onClick={deleteData}>Delete</Button>\r\n\r\n        {/* Dialog pop-up */}\r\n        <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n            <DialogTitle id=\"form-dialog-title\">Update Car {selectionModel}</DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText>Update Car</DialogContentText>\r\n                    <CarForm id={selectionModel!}/>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={handleClose} color=\"primary\">Cancel</Button>\r\n                <Button onClick={handleClose} color=\"primary\">Done</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\components\\CarForm\\CarForm.tsx",["118","119"],"import React from 'react'\r\nimport { useDispatch, useSelector, useStore } from 'react-redux';\r\nimport { useForm } from 'react-hook-form';\r\nimport {chooseMake, chooseModel, chooseCondition, chooseYear  } from '../../redux/slices/RootSlice';\r\nimport { Input } from '../SharedComponents/Input';\r\nimport { Button } from '@material-ui/core';\r\n\r\nimport { server_calls } from '../../api';\r\n\r\nimport { useGetData } from '../../custom-hooks';\r\n\r\n\r\ninterface CarFormProps {\r\n    id?:string;\r\n    data?:{}\r\n}\r\n\r\ninterface CarState {\r\n    make: string;\r\n    model: string;\r\n    condition: string;\r\n    year: string;\r\n}\r\n\r\nexport const CarForm = (props:CarFormProps) => {\r\n    const dispatch = useDispatch();\r\n    // let { carData, getData } = useGetData();\r\n    const store = useStore();\r\n    const make = useSelector<CarState>(state => state.make);\r\n    const { register, handleSubmit } = useForm({ })\r\n\r\n    const onSubmit = (data:any, event:any) => {\r\n        console.log(props.id)\r\n        // The ! is for strictly typed Typescript stuff\r\n        if(props.id!){\r\n            server_calls.update(props.id!, data);\r\n            console.log(`Updated:${data} ${props.id}`);\r\n            console.log(data);\r\n            setTimeout( () => {window.location.reload()}, 1000);\r\n            event.target.reset();\r\n        } else {\r\n            // Dispatch basically updates our state / Redux store\r\n            dispatch(chooseMake(data.make));\r\n            dispatch(chooseModel(data.model));\r\n            dispatch(chooseCondition(data.condition));\r\n            dispatch(chooseYear(data.year));\r\n            server_calls.create(store.getState());\r\n            setTimeout( () => {window.location.reload()}, 1000)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit = {handleSubmit(onSubmit)}>\r\n                <div>\r\n                    <label htmlFor=\"make\">Car Make</label>\r\n                    <Input {...register('make')} name=\"make\" placeholder='make'/>\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"model\">Model</label>\r\n                    <Input {...register('model')} name=\"model\" placeholder='model'/>\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"condition\">Condition</label>\r\n                    <Input {...register('condition')} name=\"condition\" placeholder=\"car's condition\"/>\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"year\">Year</label>\r\n                    <Input {...register('year')} name=\"year\" placeholder='year'/>\r\n                </div>\r\n                <Button type='submit'>Submit</Button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\api\\index.ts",[],"C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\custom-hooks\\index.ts",[],"C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\api\\server.ts",["120","121"],"let token = 'cc69f79905fc670f5303b2bc1868a2f1a5cf5eeb83d343ca'\r\n\r\nexport const server_calls = {\r\n    get: async () => {\r\n        const response = await fetch(` https://ionized-low-centaur.glitch.me/api/cars`,{\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'x-access-token': `Bearer ${token}`\r\n            }\r\n        });\r\n\r\n        if (!response.ok){\r\n            throw new Error('Failed to fetch data from server')\r\n        }\r\n\r\n        return await response.json()\r\n    },\r\n\r\n    create: async(data: any = {}) => {\r\n        const response = await fetch(` https://ionized-low-centaur.glitch.me/api/cars`,{\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'x-access-token': `Bearer ${token}`\r\n            },\r\n            body: JSON.stringify(data)\r\n        });\r\n\r\n        if(!response.ok){\r\n            throw new Error('Failed to Create new data on server')\r\n        }\r\n\r\n        return await response.json()\r\n    },\r\n    update: async (id:string, data:any = {}) => {\r\n        const response = await fetch(` https://ionized-low-centaur.glitch.me/api/cars/${id}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'x-access-token': `Bearer ${token}`\r\n            },\r\n            body: JSON.stringify(data)\r\n        });\r\n    },\r\n    delete: async(id:string) => {\r\n        const response = await fetch(` https://ionized-low-centaur.glitch.me/api/cars/${id}`,{\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'x-access-token': `Bearer ${token}`\r\n            }\r\n        })\r\n    }\r\n}\r\n","C:\\Users\\Andrew Krause\\react-car-inv-6\\src\\custom-hooks\\FetchData.ts",[],{"ruleId":"122","severity":1,"message":"123","line":4,"column":30,"nodeType":"124","messageId":"125","endLine":4,"endColumn":39},{"ruleId":"122","severity":1,"message":"126","line":1,"column":10,"nodeType":"124","messageId":"125","endLine":1,"endColumn":19},{"ruleId":"122","severity":1,"message":"127","line":4,"column":10,"nodeType":"124","messageId":"125","endLine":4,"endColumn":14},{"ruleId":"122","severity":1,"message":"128","line":5,"column":9,"nodeType":"124","messageId":"125","endLine":5,"endColumn":14},{"ruleId":"122","severity":1,"message":"129","line":9,"column":5,"nodeType":"124","messageId":"125","endLine":9,"endColumn":17},{"ruleId":"122","severity":1,"message":"130","line":35,"column":20,"nodeType":"124","messageId":"125","endLine":35,"endColumn":27},{"ruleId":"122","severity":1,"message":"131","line":10,"column":10,"nodeType":"124","messageId":"125","endLine":10,"endColumn":20},{"ruleId":"122","severity":1,"message":"132","line":29,"column":11,"nodeType":"124","messageId":"125","endLine":29,"endColumn":15},{"ruleId":"122","severity":1,"message":"133","line":37,"column":15,"nodeType":"124","messageId":"125","endLine":37,"endColumn":23},{"ruleId":"122","severity":1,"message":"133","line":47,"column":15,"nodeType":"124","messageId":"125","endLine":47,"endColumn":23},"@typescript-eslint/no-unused-vars","'AuthCheck' is defined but never used.","Identifier","unusedVar","'constants' is defined but never used.","'Link' is defined but never used.","'Paper' is defined but never used.","'ListItemIcon' is defined but never used.","'setData' is assigned a value but never used.","'useGetData' is defined but never used.","'make' is assigned a value but never used.","'response' is assigned a value but never used."]