{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { Observable } from '../Observable';\nimport { innerFrom } from './innerFrom';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { EMPTY } from './empty';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { popResultSelector } from '../util/args';\nexport function zip() {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  var resultSelector = popResultSelector(args);\n  var sources = argsOrArgArray(args);\n  return sources.length ? new Observable(function (subscriber) {\n    var buffers = sources.map(function () {\n      return [];\n    });\n    var completed = sources.map(function () {\n      return false;\n    });\n    subscriber.add(function () {\n      buffers = completed = null;\n    });\n    var _loop_1 = function (sourceIndex) {\n      innerFrom(sources[sourceIndex]).subscribe(createOperatorSubscriber(subscriber, function (value) {\n        buffers[sourceIndex].push(value);\n        if (buffers.every(function (buffer) {\n          return buffer.length;\n        })) {\n          var result = buffers.map(function (buffer) {\n            return buffer.shift();\n          });\n          subscriber.next(resultSelector ? resultSelector.apply(void 0, __spreadArray([], __read(result))) : result);\n          if (buffers.some(function (buffer, i) {\n            return !buffer.length && completed[i];\n          })) {\n            subscriber.complete();\n          }\n        }\n      }, function () {\n        completed[sourceIndex] = true;\n        !buffers[sourceIndex].length && subscriber.complete();\n      }));\n    };\n    for (var sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++) {\n      _loop_1(sourceIndex);\n    }\n    return function () {\n      buffers = completed = null;\n    };\n  }) : EMPTY;\n}","map":{"version":3,"sources":["../../../../src/internal/observable/zip.ts"],"names":[],"mappings":";AAAA,SAAS,UAAU,QAAQ,eAAe;AAE1C,SAAS,SAAS,QAAQ,aAAa;AACvC,SAAS,cAAc,QAAQ,wBAAwB;AACvD,SAAS,KAAK,QAAQ,SAAS;AAC/B,SAAS,wBAAwB,QAAQ,iCAAiC;AAC1E,SAAS,iBAAiB,QAAQ,cAAc;AA4ChD,OAAM,SAAU,GAAG,GAAA;EAAC,IAAA,IAAA,GAAA,EAAA;OAAA,IAAA,EAAA,GAAA,CAAkB,EAAlB,EAAA,GAAA,SAAA,CAAA,MAAkB,EAAlB,EAAA,EAAkB,EAAA;IAAlB,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;EAClB,IAAM,cAAc,GAAG,iBAAiB,CAAC,IAAI,CAAC;EAE9C,IAAM,OAAO,GAAG,cAAc,CAAC,IAAI,CAA0B;EAE7D,OAAO,OAAO,CAAC,MAAM,GACjB,IAAI,UAAU,CAAY,UAAC,UAAU,EAAA;IAGnC,IAAI,OAAO,GAAgB,OAAO,CAAC,GAAG,CAAC,YAAA;MAAM,OAAA,EAAE;IAAF,CAAE,CAAC;IAKhD,IAAI,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,YAAA;MAAM,OAAA,KAAK;IAAL,CAAK,CAAC;IAGxC,UAAU,CAAC,GAAG,CAAC,YAAA;MACb,OAAO,GAAG,SAAS,GAAG,IAAK;IAC7B,CAAC,CAAC;4BAKO,WAAW,EAAA;MAClB,SAAS,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,CACvC,wBAAwB,CACtB,UAAU,EACV,UAAC,KAAK,EAAA;QACJ,OAAO,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;QAIhC,IAAI,OAAO,CAAC,KAAK,CAAC,UAAC,MAAM,EAAA;UAAK,OAAA,MAAM,CAAC,MAAM;QAAb,CAAa,CAAC,EAAE;UAC5C,IAAM,MAAM,GAAQ,OAAO,CAAC,GAAG,CAAC,UAAC,MAAM,EAAA;YAAK,OAAA,MAAM,CAAC,KAAK,EAAG;UAAf,CAAe,CAAC;UAE5D,UAAU,CAAC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAA,KAAA,CAAA,KAAA,CAAA,EAAA,aAAA,CAAA,EAAA,EAAA,MAAA,CAAI,MAAM,CAAA,CAAA,CAAA,GAAI,MAAM,CAAC;UAIpE,IAAI,OAAO,CAAC,IAAI,CAAC,UAAC,MAAM,EAAE,CAAC,EAAA;YAAK,OAAA,CAAC,MAAM,CAAC,MAAM,IAAI,SAAS,CAAC,CAAC,CAAC;UAA9B,CAA8B,CAAC,EAAE;YAC/D,UAAU,CAAC,QAAQ,EAAE;UACtB;QACF;MACH,CAAC,EACD,YAAA;QAGE,SAAS,CAAC,WAAW,CAAC,GAAG,IAAI;QAI7B,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,MAAM,IAAI,UAAU,CAAC,QAAQ,EAAE;MACvD,CAAC,CACF,CACF;;IA/BH,KAAK,IAAI,WAAW,GAAG,CAAC,EAAE,CAAC,UAAU,CAAC,MAAM,IAAI,WAAW,GAAG,OAAO,CAAC,MAAM,EAAE,WAAW,EAAE,EAAA;cAAlF,WAAW,CAAA;IAgCnB;IAGD,OAAO,YAAA;MACL,OAAO,GAAG,SAAS,GAAG,IAAK;IAC7B,CAAC;EACH,CAAC,CAAC,GACF,KAAK;AACX","sourceRoot":"","sourcesContent":["import { __read, __spreadArray } from \"tslib\";\nimport { Observable } from '../Observable';\nimport { innerFrom } from './innerFrom';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { EMPTY } from './empty';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { popResultSelector } from '../util/args';\nexport function zip() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var resultSelector = popResultSelector(args);\n    var sources = argsOrArgArray(args);\n    return sources.length\n        ? new Observable(function (subscriber) {\n            var buffers = sources.map(function () { return []; });\n            var completed = sources.map(function () { return false; });\n            subscriber.add(function () {\n                buffers = completed = null;\n            });\n            var _loop_1 = function (sourceIndex) {\n                innerFrom(sources[sourceIndex]).subscribe(createOperatorSubscriber(subscriber, function (value) {\n                    buffers[sourceIndex].push(value);\n                    if (buffers.every(function (buffer) { return buffer.length; })) {\n                        var result = buffers.map(function (buffer) { return buffer.shift(); });\n                        subscriber.next(resultSelector ? resultSelector.apply(void 0, __spreadArray([], __read(result))) : result);\n                        if (buffers.some(function (buffer, i) { return !buffer.length && completed[i]; })) {\n                            subscriber.complete();\n                        }\n                    }\n                }, function () {\n                    completed[sourceIndex] = true;\n                    !buffers[sourceIndex].length && subscriber.complete();\n                }));\n            };\n            for (var sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++) {\n                _loop_1(sourceIndex);\n            }\n            return function () {\n                buffers = completed = null;\n            };\n        })\n        : EMPTY;\n}\n//# sourceMappingURL=zip.js.map"]},"metadata":{},"sourceType":"module"}