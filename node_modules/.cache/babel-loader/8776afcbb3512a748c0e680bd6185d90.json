{"ast":null,"code":"import { __generator } from \"tslib\";\nimport { identity } from '../util/identity';\nimport { isScheduler } from '../util/isScheduler';\nimport { defer } from './defer';\nimport { scheduleIterable } from '../scheduled/scheduleIterable';\nexport function generate(initialStateOrOptions, condition, iterate, resultSelectorOrScheduler, scheduler) {\n  var _a, _b;\n  var resultSelector;\n  var initialState;\n  if (arguments.length === 1) {\n    _a = initialStateOrOptions, initialState = _a.initialState, condition = _a.condition, iterate = _a.iterate, _b = _a.resultSelector, resultSelector = _b === void 0 ? identity : _b, scheduler = _a.scheduler;\n  } else {\n    initialState = initialStateOrOptions;\n    if (!resultSelectorOrScheduler || isScheduler(resultSelectorOrScheduler)) {\n      resultSelector = identity;\n      scheduler = resultSelectorOrScheduler;\n    } else {\n      resultSelector = resultSelectorOrScheduler;\n    }\n  }\n  function gen() {\n    var state;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          state = initialState;\n          _a.label = 1;\n        case 1:\n          if (!(!condition || condition(state))) return [3, 4];\n          return [4, resultSelector(state)];\n        case 2:\n          _a.sent();\n          _a.label = 3;\n        case 3:\n          state = iterate(state);\n          return [3, 1];\n        case 4:\n          return [2];\n      }\n    });\n  }\n  return defer(scheduler ? function () {\n    return scheduleIterable(gen(), scheduler);\n  } : gen);\n}","map":{"version":3,"sources":["../../../../src/internal/observable/generate.ts"],"names":[],"mappings":";AACA,SAAS,QAAQ,QAAQ,kBAAkB;AAE3C,SAAS,WAAW,QAAQ,qBAAqB;AACjD,SAAS,KAAK,QAAQ,SAAS;AAC/B,SAAS,gBAAgB,QAAQ,+BAA+B;AAuUhE,OAAM,SAAU,QAAQ,CACtB,qBAAgD,EAChD,SAA4B,EAC5B,OAAwB,EACxB,yBAA4D,EAC5D,SAAyB,EAAA;;EAEzB,IAAI,cAAgC;EACpC,IAAI,YAAe;EAInB,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;IAGzB,EAAA,GAMG,qBAA8C,EALhD,YAAY,GAAA,EAAA,CAAA,YAAA,EACZ,SAAS,GAAA,EAAA,CAAA,SAAA,EACT,OAAO,GAAA,EAAA,CAAA,OAAA,EACP,EAAA,GAAA,EAAA,CAAA,cAA6C,EAA7C,cAAc,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,QAA4B,GAAA,EAAA,EAC7C,SAAS,GAAA,EAAA,CAAA,SAAA;GAEZ,MAAM;IAGL,YAAY,GAAG,qBAA0B;IACzC,IAAI,CAAC,yBAAyB,IAAI,WAAW,CAAC,yBAAyB,CAAC,EAAE;MACxE,cAAc,GAAG,QAA4B;MAC7C,SAAS,GAAG,yBAA0C;KACvD,MAAM;MACL,cAAc,GAAG,yBAA6C;IAC/D;EACF;EAGD,SAAU,GAAG,GAAA;;;;;UACF,KAAK,GAAG,YAAY;;;cAAE,EAAA,CAAC,SAAS,IAAI,SAAS,CAAC,KAAK,CAAC,CAAA,EAAA,OAAA,CAAA,CAAA,EAAA,CAAA,CAAA;UAC3D,OAAA,CAAA,CAAA,EAAM,cAAc,CAAC,KAAK,CAAC,CAAA;;UAA3B,EAAA,CAAA,IAAA,EAA2B;;;UADkC,KAAK,GAAG,OAAQ,CAAC,KAAK,CAAC;;;;;;EAGvF;EAGD,OAAO,KAAK,CACT,SAAS,GAGN,YAAA;IAAM,OAAA,gBAAgB,CAAC,GAAG,EAAE,EAAE,SAAU,CAAC;EAAnC,CAAmC,GAGzC,GAAG,CACR;AACH","sourceRoot":"","sourcesContent":["import { __generator } from \"tslib\";\nimport { identity } from '../util/identity';\nimport { isScheduler } from '../util/isScheduler';\nimport { defer } from './defer';\nimport { scheduleIterable } from '../scheduled/scheduleIterable';\nexport function generate(initialStateOrOptions, condition, iterate, resultSelectorOrScheduler, scheduler) {\n    var _a, _b;\n    var resultSelector;\n    var initialState;\n    if (arguments.length === 1) {\n        (_a = initialStateOrOptions, initialState = _a.initialState, condition = _a.condition, iterate = _a.iterate, _b = _a.resultSelector, resultSelector = _b === void 0 ? identity : _b, scheduler = _a.scheduler);\n    }\n    else {\n        initialState = initialStateOrOptions;\n        if (!resultSelectorOrScheduler || isScheduler(resultSelectorOrScheduler)) {\n            resultSelector = identity;\n            scheduler = resultSelectorOrScheduler;\n        }\n        else {\n            resultSelector = resultSelectorOrScheduler;\n        }\n    }\n    function gen() {\n        var state;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    state = initialState;\n                    _a.label = 1;\n                case 1:\n                    if (!(!condition || condition(state))) return [3, 4];\n                    return [4, resultSelector(state)];\n                case 2:\n                    _a.sent();\n                    _a.label = 3;\n                case 3:\n                    state = iterate(state);\n                    return [3, 1];\n                case 4: return [2];\n            }\n        });\n    }\n    return defer((scheduler\n        ?\n            function () { return scheduleIterable(gen(), scheduler); }\n        :\n            gen));\n}\n//# sourceMappingURL=generate.js.map"]},"metadata":{},"sourceType":"module"}