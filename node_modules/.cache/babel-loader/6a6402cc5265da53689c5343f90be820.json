{"ast":null,"code":"import { asyncScheduler } from '../scheduler/async';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function debounceTime(dueTime, scheduler) {\n  if (scheduler === void 0) {\n    scheduler = asyncScheduler;\n  }\n  return operate(function (source, subscriber) {\n    var activeTask = null;\n    var lastValue = null;\n    var lastTime = null;\n    var emit = function emit() {\n      if (activeTask) {\n        activeTask.unsubscribe();\n        activeTask = null;\n        var value = lastValue;\n        lastValue = null;\n        subscriber.next(value);\n      }\n    };\n    function emitWhenIdle() {\n      var targetTime = lastTime + dueTime;\n      var now = scheduler.now();\n      if (now < targetTime) {\n        activeTask = this.schedule(undefined, targetTime - now);\n        subscriber.add(activeTask);\n        return;\n      }\n      emit();\n    }\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      lastValue = value;\n      lastTime = scheduler.now();\n      if (!activeTask) {\n        activeTask = scheduler.schedule(emitWhenIdle, dueTime);\n        subscriber.add(activeTask);\n      }\n    }, function () {\n      emit();\n      subscriber.complete();\n    }, undefined, function () {\n      lastValue = activeTask = null;\n    }));\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/operators/debounceTime.ts"],"names":[],"mappings":"AAAA,SAAS,cAAc,QAAQ,oBAAoB;AAGnD,SAAS,OAAO,QAAQ,cAAc;AACtC,SAAS,wBAAwB,QAAQ,sBAAsB;AA2D/D,OAAM,SAAU,YAAY,CAAI,OAAe,EAAE,SAAyC,EAAA;EAAzC,IAAA,SAAA,KAAA,KAAA,CAAA,EAAA;IAAA,SAAA,GAAA,cAAyC;EAAA;EACxF,OAAO,OAAO,CAAC,UAAC,MAAM,EAAE,UAAU,EAAA;IAChC,IAAI,UAAU,GAAwB,IAAI;IAC1C,IAAI,SAAS,GAAa,IAAI;IAC9B,IAAI,QAAQ,GAAkB,IAAI;IAElC,IAAM,IAAI,GAAG,SAAP,IAAI,GAAG;MACX,IAAI,UAAU,EAAE;QAEd,UAAU,CAAC,WAAW,EAAE;QACxB,UAAU,GAAG,IAAI;QACjB,IAAM,KAAK,GAAG,SAAU;QACxB,SAAS,GAAG,IAAI;QAChB,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC;MACvB;IACH,CAAC;IACD,SAAS,YAAY,GAAA;MAInB,IAAM,UAAU,GAAG,QAAS,GAAG,OAAO;MACtC,IAAM,GAAG,GAAG,SAAS,CAAC,GAAG,EAAE;MAC3B,IAAI,GAAG,GAAG,UAAU,EAAE;QAEpB,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,UAAU,GAAG,GAAG,CAAC;QACvD,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC;QAC1B;MACD;MAED,IAAI,EAAE;IACR;IAEA,MAAM,CAAC,SAAS,CACd,wBAAwB,CACtB,UAAU,EACV,UAAC,KAAQ,EAAA;MACP,SAAS,GAAG,KAAK;MACjB,QAAQ,GAAG,SAAS,CAAC,GAAG,EAAE;MAG1B,IAAI,CAAC,UAAU,EAAE;QACf,UAAU,GAAG,SAAS,CAAC,QAAQ,CAAC,YAAY,EAAE,OAAO,CAAC;QACtD,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC;MAC3B;IACH,CAAC,EACD,YAAA;MAGE,IAAI,EAAE;MACN,UAAU,CAAC,QAAQ,EAAE;IACvB,CAAC,EAED,SAAS,EACT,YAAA;MAEE,SAAS,GAAG,UAAU,GAAG,IAAI;IAC/B,CAAC,CACF,CACF;EACH,CAAC,CAAC;AACJ","sourceRoot":"","sourcesContent":["import { asyncScheduler } from '../scheduler/async';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function debounceTime(dueTime, scheduler) {\n    if (scheduler === void 0) { scheduler = asyncScheduler; }\n    return operate(function (source, subscriber) {\n        var activeTask = null;\n        var lastValue = null;\n        var lastTime = null;\n        var emit = function () {\n            if (activeTask) {\n                activeTask.unsubscribe();\n                activeTask = null;\n                var value = lastValue;\n                lastValue = null;\n                subscriber.next(value);\n            }\n        };\n        function emitWhenIdle() {\n            var targetTime = lastTime + dueTime;\n            var now = scheduler.now();\n            if (now < targetTime) {\n                activeTask = this.schedule(undefined, targetTime - now);\n                subscriber.add(activeTask);\n                return;\n            }\n            emit();\n        }\n        source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n            lastValue = value;\n            lastTime = scheduler.now();\n            if (!activeTask) {\n                activeTask = scheduler.schedule(emitWhenIdle, dueTime);\n                subscriber.add(activeTask);\n            }\n        }, function () {\n            emit();\n            subscriber.complete();\n        }, undefined, function () {\n            lastValue = activeTask = null;\n        }));\n    });\n}\n//# sourceMappingURL=debounceTime.js.map"]},"metadata":{},"sourceType":"module"}