{"ast":null,"code":"import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function find(predicate, thisArg) {\n  return operate(createFind(predicate, thisArg, 'value'));\n}\nexport function createFind(predicate, thisArg, emit) {\n  var findIndex = emit === 'index';\n  return function (source, subscriber) {\n    var index = 0;\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      var i = index++;\n      if (predicate.call(thisArg, value, i, source)) {\n        subscriber.next(findIndex ? i : value);\n        subscriber.complete();\n      }\n    }, function () {\n      subscriber.next(findIndex ? -1 : undefined);\n      subscriber.complete();\n    }));\n  };\n}","map":{"version":3,"sources":["../../../../src/internal/operators/find.ts"],"names":[],"mappings":"AAGA,SAAS,OAAO,QAAQ,cAAc;AACtC,SAAS,wBAAwB,QAAQ,sBAAsB;AA4D/D,OAAM,SAAU,IAAI,CAClB,SAAsE,EACtE,OAAa,EAAA;EAEb,OAAO,OAAO,CAAC,UAAU,CAAC,SAAS,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AACzD;AAEA,OAAM,SAAU,UAAU,CACxB,SAAsE,EACtE,OAAY,EACZ,IAAuB,EAAA;EAEvB,IAAM,SAAS,GAAG,IAAI,KAAK,OAAO;EAClC,OAAO,UAAC,MAAqB,EAAE,UAA2B,EAAA;IACxD,IAAI,KAAK,GAAG,CAAC;IACb,MAAM,CAAC,SAAS,CACd,wBAAwB,CACtB,UAAU,EACV,UAAC,KAAK,EAAA;MACJ,IAAM,CAAC,GAAG,KAAK,EAAE;MACjB,IAAI,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,CAAC,EAAE;QAC7C,UAAU,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,GAAG,KAAK,CAAC;QACtC,UAAU,CAAC,QAAQ,EAAE;MACtB;IACH,CAAC,EACD,YAAA;MACE,UAAU,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;MAC3C,UAAU,CAAC,QAAQ,EAAE;IACvB,CAAC,CACF,CACF;EACH,CAAC;AACH","sourceRoot":"","sourcesContent":["import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function find(predicate, thisArg) {\n    return operate(createFind(predicate, thisArg, 'value'));\n}\nexport function createFind(predicate, thisArg, emit) {\n    var findIndex = emit === 'index';\n    return function (source, subscriber) {\n        var index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n            var i = index++;\n            if (predicate.call(thisArg, value, i, source)) {\n                subscriber.next(findIndex ? i : value);\n                subscriber.complete();\n            }\n        }, function () {\n            subscriber.next(findIndex ? -1 : undefined);\n            subscriber.complete();\n        }));\n    };\n}\n//# sourceMappingURL=find.js.map"]},"metadata":{},"sourceType":"module"}