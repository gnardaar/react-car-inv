{"ast":null,"code":"import { innerFrom } from '../observable/innerFrom';\nimport { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function repeatWhen(notifier) {\n  return operate(function (source, subscriber) {\n    var innerSub;\n    var syncResub = false;\n    var completions$;\n    var isNotifierComplete = false;\n    var isMainComplete = false;\n    var checkComplete = function () {\n      return isMainComplete && isNotifierComplete && (subscriber.complete(), true);\n    };\n    var getCompletionSubject = function () {\n      if (!completions$) {\n        completions$ = new Subject();\n        innerFrom(notifier(completions$)).subscribe(createOperatorSubscriber(subscriber, function () {\n          if (innerSub) {\n            subscribeForRepeatWhen();\n          } else {\n            syncResub = true;\n          }\n        }, function () {\n          isNotifierComplete = true;\n          checkComplete();\n        }));\n      }\n      return completions$;\n    };\n    var subscribeForRepeatWhen = function () {\n      isMainComplete = false;\n      innerSub = source.subscribe(createOperatorSubscriber(subscriber, undefined, function () {\n        isMainComplete = true;\n        !checkComplete() && getCompletionSubject().next();\n      }));\n      if (syncResub) {\n        innerSub.unsubscribe();\n        innerSub = null;\n        syncResub = false;\n        subscribeForRepeatWhen();\n      }\n    };\n    subscribeForRepeatWhen();\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/operators/repeatWhen.ts"],"names":[],"mappings":"AACA,SAAS,SAAS,QAAQ,yBAAyB;AACnD,SAAS,OAAO,QAAQ,YAAY;AAIpC,SAAS,OAAO,QAAQ,cAAc;AACtC,SAAS,wBAAwB,QAAQ,sBAAsB;AAoC/D,OAAM,SAAU,UAAU,CAAI,QAAmE,EAAA;EAC/F,OAAO,OAAO,CAAC,UAAC,MAAM,EAAE,UAAU,EAAA;IAChC,IAAI,QAA6B;IACjC,IAAI,SAAS,GAAG,KAAK;IACrB,IAAI,YAA2B;IAC/B,IAAI,kBAAkB,GAAG,KAAK;IAC9B,IAAI,cAAc,GAAG,KAAK;IAK1B,IAAM,aAAa,GAAG,YAAA;MAAM,OAAA,cAAc,IAAI,kBAAkB,KAAK,UAAU,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC;IAArE,CAAqE;IAKjG,IAAM,oBAAoB,GAAG,YAAA;MAC3B,IAAI,CAAC,YAAY,EAAE;QACjB,YAAY,GAAG,IAAI,OAAO,EAAE;QAI5B,SAAS,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS,CACzC,wBAAwB,CACtB,UAAU,EACV,YAAA;UACE,IAAI,QAAQ,EAAE;YACZ,sBAAsB,EAAE;WACzB,MAAM;YAKL,SAAS,GAAG,IAAI;UACjB;QACH,CAAC,EACD,YAAA;UACE,kBAAkB,GAAG,IAAI;UACzB,aAAa,EAAE;QACjB,CAAC,CACF,CACF;MACF;MACD,OAAO,YAAY;IACrB,CAAC;IAED,IAAM,sBAAsB,GAAG,YAAA;MAC7B,cAAc,GAAG,KAAK;MAEtB,QAAQ,GAAG,MAAM,CAAC,SAAS,CACzB,wBAAwB,CAAC,UAAU,EAAE,SAAS,EAAE,YAAA;QAC9C,cAAc,GAAG,IAAI;QAMrB,CAAC,aAAa,EAAE,IAAI,oBAAoB,EAAE,CAAC,IAAI,EAAE;MACnD,CAAC,CAAC,CACH;MAED,IAAI,SAAS,EAAE;QAKb,QAAQ,CAAC,WAAW,EAAE;QAItB,QAAQ,GAAG,IAAI;QAEf,SAAS,GAAG,KAAK;QAEjB,sBAAsB,EAAE;MACzB;IACH,CAAC;IAGD,sBAAsB,EAAE;EAC1B,CAAC,CAAC;AACJ","sourceRoot":"","sourcesContent":["import { innerFrom } from '../observable/innerFrom';\nimport { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function repeatWhen(notifier) {\n    return operate(function (source, subscriber) {\n        var innerSub;\n        var syncResub = false;\n        var completions$;\n        var isNotifierComplete = false;\n        var isMainComplete = false;\n        var checkComplete = function () { return isMainComplete && isNotifierComplete && (subscriber.complete(), true); };\n        var getCompletionSubject = function () {\n            if (!completions$) {\n                completions$ = new Subject();\n                innerFrom(notifier(completions$)).subscribe(createOperatorSubscriber(subscriber, function () {\n                    if (innerSub) {\n                        subscribeForRepeatWhen();\n                    }\n                    else {\n                        syncResub = true;\n                    }\n                }, function () {\n                    isNotifierComplete = true;\n                    checkComplete();\n                }));\n            }\n            return completions$;\n        };\n        var subscribeForRepeatWhen = function () {\n            isMainComplete = false;\n            innerSub = source.subscribe(createOperatorSubscriber(subscriber, undefined, function () {\n                isMainComplete = true;\n                !checkComplete() && getCompletionSubject().next();\n            }));\n            if (syncResub) {\n                innerSub.unsubscribe();\n                innerSub = null;\n                syncResub = false;\n                subscribeForRepeatWhen();\n            }\n        };\n        subscribeForRepeatWhen();\n    });\n}\n//# sourceMappingURL=repeatWhen.js.map"]},"metadata":{},"sourceType":"module"}