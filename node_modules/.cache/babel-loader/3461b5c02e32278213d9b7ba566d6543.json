{"ast":null,"code":"import { innerFrom } from '../observable/innerFrom';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {\n  var buffer = [];\n  var active = 0;\n  var index = 0;\n  var isComplete = false;\n  var checkComplete = function () {\n    if (isComplete && !buffer.length && !active) {\n      subscriber.complete();\n    }\n  };\n  var outerNext = function (value) {\n    return active < concurrent ? doInnerSub(value) : buffer.push(value);\n  };\n  var doInnerSub = function (value) {\n    expand && subscriber.next(value);\n    active++;\n    var innerComplete = false;\n    innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, function (innerValue) {\n      onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);\n      if (expand) {\n        outerNext(innerValue);\n      } else {\n        subscriber.next(innerValue);\n      }\n    }, function () {\n      innerComplete = true;\n    }, undefined, function () {\n      if (innerComplete) {\n        try {\n          active--;\n          var _loop_1 = function () {\n            var bufferedValue = buffer.shift();\n            if (innerSubScheduler) {\n              executeSchedule(subscriber, innerSubScheduler, function () {\n                return doInnerSub(bufferedValue);\n              });\n            } else {\n              doInnerSub(bufferedValue);\n            }\n          };\n          while (buffer.length && active < concurrent) {\n            _loop_1();\n          }\n          checkComplete();\n        } catch (err) {\n          subscriber.error(err);\n        }\n      }\n    }));\n  };\n  source.subscribe(createOperatorSubscriber(subscriber, outerNext, function () {\n    isComplete = true;\n    checkComplete();\n  }));\n  return function () {\n    additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();\n  };\n}","map":{"version":3,"sources":["../../../../src/internal/operators/mergeInternals.ts"],"names":[],"mappings":"AACA,SAAS,SAAS,QAAQ,yBAAyB;AAGnD,SAAS,eAAe,QAAQ,yBAAyB;AACzD,SAAS,wBAAwB,QAAQ,sBAAsB;AAe/D,OAAM,SAAU,cAAc,CAC5B,MAAqB,EACrB,UAAyB,EACzB,OAAwD,EACxD,UAAkB,EAClB,YAAsC,EACtC,MAAgB,EAChB,iBAAiC,EACjC,mBAAgC,EAAA;EAGhC,IAAM,MAAM,GAAQ,EAAE;EAEtB,IAAI,MAAM,GAAG,CAAC;EAEd,IAAI,KAAK,GAAG,CAAC;EAEb,IAAI,UAAU,GAAG,KAAK;EAKtB,IAAM,aAAa,GAAG,YAAA;IAIpB,IAAI,UAAU,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,MAAM,EAAE;MAC3C,UAAU,CAAC,QAAQ,EAAE;IACtB;EACH,CAAC;EAGD,IAAM,SAAS,GAAG,UAAC,KAAQ,EAAA;IAAK,OAAC,MAAM,GAAG,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;EAA7D,CAA8D;EAE9F,IAAM,UAAU,GAAG,UAAC,KAAQ,EAAA;IAI1B,MAAM,IAAI,UAAU,CAAC,IAAI,CAAC,KAAY,CAAC;IAIvC,MAAM,EAAE;IAKR,IAAI,aAAa,GAAG,KAAK;IAGzB,SAAS,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,SAAS,CAC1C,wBAAwB,CACtB,UAAU,EACV,UAAC,UAAU,EAAA;MAGT,YAAY,KAAA,IAAA,IAAZ,YAAY,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZ,YAAY,CAAG,UAAU,CAAC;MAE1B,IAAI,MAAM,EAAE;QAGV,SAAS,CAAC,UAAiB,CAAC;OAC7B,MAAM;QAEL,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC;MAC5B;IACH,CAAC,EACD,YAAA;MAGE,aAAa,GAAG,IAAI;IACtB,CAAC,EAED,SAAS,EACT,YAAA;MAIE,IAAI,aAAa,EAAE;QAKjB,IAAI;UAIF,MAAM,EAAE;;YAMN,IAAM,aAAa,GAAG,MAAM,CAAC,KAAK,EAAG;YAIrC,IAAI,iBAAiB,EAAE;cACrB,eAAe,CAAC,UAAU,EAAE,iBAAiB,EAAE,YAAA;gBAAM,OAAA,UAAU,CAAC,aAAa,CAAC;cAAzB,CAAyB,CAAC;aAChF,MAAM;cACL,UAAU,CAAC,aAAa,CAAC;YAC1B;;UATH,OAAO,MAAM,CAAC,MAAM,IAAI,MAAM,GAAG,UAAU,EAAA;;UAU1C;UAED,aAAa,EAAE;SAChB,CAAC,OAAO,GAAG,EAAE;UACZ,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC;QACtB;MACF;IACH,CAAC,CACF,CACF;EACH,CAAC;EAGD,MAAM,CAAC,SAAS,CACd,wBAAwB,CAAC,UAAU,EAAE,SAAS,EAAE,YAAA;IAE9C,UAAU,GAAG,IAAI;IACjB,aAAa,EAAE;EACjB,CAAC,CAAC,CACH;EAID,OAAO,YAAA;IACL,mBAAmB,KAAA,IAAA,IAAnB,mBAAmB,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAnB,mBAAmB,EAAI;EACzB,CAAC;AACH","sourceRoot":"","sourcesContent":["import { innerFrom } from '../observable/innerFrom';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {\n    var buffer = [];\n    var active = 0;\n    var index = 0;\n    var isComplete = false;\n    var checkComplete = function () {\n        if (isComplete && !buffer.length && !active) {\n            subscriber.complete();\n        }\n    };\n    var outerNext = function (value) { return (active < concurrent ? doInnerSub(value) : buffer.push(value)); };\n    var doInnerSub = function (value) {\n        expand && subscriber.next(value);\n        active++;\n        var innerComplete = false;\n        innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, function (innerValue) {\n            onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);\n            if (expand) {\n                outerNext(innerValue);\n            }\n            else {\n                subscriber.next(innerValue);\n            }\n        }, function () {\n            innerComplete = true;\n        }, undefined, function () {\n            if (innerComplete) {\n                try {\n                    active--;\n                    var _loop_1 = function () {\n                        var bufferedValue = buffer.shift();\n                        if (innerSubScheduler) {\n                            executeSchedule(subscriber, innerSubScheduler, function () { return doInnerSub(bufferedValue); });\n                        }\n                        else {\n                            doInnerSub(bufferedValue);\n                        }\n                    };\n                    while (buffer.length && active < concurrent) {\n                        _loop_1();\n                    }\n                    checkComplete();\n                }\n                catch (err) {\n                    subscriber.error(err);\n                }\n            }\n        }));\n    };\n    source.subscribe(createOperatorSubscriber(subscriber, outerNext, function () {\n        isComplete = true;\n        checkComplete();\n    }));\n    return function () {\n        additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();\n    };\n}\n//# sourceMappingURL=mergeInternals.js.map"]},"metadata":{},"sourceType":"module"}