{"ast":null,"code":"import { __values } from \"tslib\";\nimport { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function windowCount(windowSize, startWindowEvery) {\n  if (startWindowEvery === void 0) {\n    startWindowEvery = 0;\n  }\n  var startEvery = startWindowEvery > 0 ? startWindowEvery : windowSize;\n  return operate(function (source, subscriber) {\n    var windows = [new Subject()];\n    var starts = [];\n    var count = 0;\n    subscriber.next(windows[0].asObservable());\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      var e_1, _a;\n      try {\n        for (var windows_1 = __values(windows), windows_1_1 = windows_1.next(); !windows_1_1.done; windows_1_1 = windows_1.next()) {\n          var window_1 = windows_1_1.value;\n          window_1.next(value);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (windows_1_1 && !windows_1_1.done && (_a = windows_1.return)) _a.call(windows_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      var c = count - windowSize + 1;\n      if (c >= 0 && c % startEvery === 0) {\n        windows.shift().complete();\n      }\n      if (++count % startEvery === 0) {\n        var window_2 = new Subject();\n        windows.push(window_2);\n        subscriber.next(window_2.asObservable());\n      }\n    }, function () {\n      while (windows.length > 0) {\n        windows.shift().complete();\n      }\n      subscriber.complete();\n    }, function (err) {\n      while (windows.length > 0) {\n        windows.shift().error(err);\n      }\n      subscriber.error(err);\n    }, function () {\n      starts = null;\n      windows = null;\n    }));\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/operators/windowCount.ts"],"names":[],"mappings":";AACA,SAAS,OAAO,QAAQ,YAAY;AAEpC,SAAS,OAAO,QAAQ,cAAc;AACtC,SAAS,wBAAwB,QAAQ,sBAAsB;AAgE/D,OAAM,SAAU,WAAW,CAAI,UAAkB,EAAE,gBAA4B,EAAA;EAA5B,IAAA,gBAAA,KAAA,KAAA,CAAA,EAAA;IAAA,gBAAA,GAAA,CAA4B;EAAA;EAC7E,IAAM,UAAU,GAAG,gBAAgB,GAAG,CAAC,GAAG,gBAAgB,GAAG,UAAU;EAEvE,OAAO,OAAO,CAAC,UAAC,MAAM,EAAE,UAAU,EAAA;IAChC,IAAI,OAAO,GAAG,CAAC,IAAI,OAAO,EAAK,CAAC;IAChC,IAAI,MAAM,GAAa,EAAE;IACzB,IAAI,KAAK,GAAG,CAAC;IAGb,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC;IAE1C,MAAM,CAAC,SAAS,CACd,wBAAwB,CACtB,UAAU,EACV,UAAC,KAAQ,EAAA;;;QAIP,KAAqB,IAAA,SAAA,GAAA,QAAA,CAAA,OAAO,CAAA,EAAA,WAAA,GAAA,SAAA,CAAA,IAAA,EAAA,EAAA,CAAA,WAAA,CAAA,IAAA,EAAA,WAAA,GAAA,SAAA,CAAA,IAAA,EAAA,EAAE;UAAzB,IAAM,QAAM,GAAA,WAAA,CAAA,KAAA;UACf,QAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACnB;;;;;;;;;;;;MAMD,IAAM,CAAC,GAAG,KAAK,GAAG,UAAU,GAAG,CAAC;MAChC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,UAAU,KAAK,CAAC,EAAE;QAClC,OAAO,CAAC,KAAK,EAAG,CAAC,QAAQ,EAAE;MAC5B;MAOD,IAAI,EAAE,KAAK,GAAG,UAAU,KAAK,CAAC,EAAE;QAC9B,IAAM,QAAM,GAAG,IAAI,OAAO,EAAK;QAC/B,OAAO,CAAC,IAAI,CAAC,QAAM,CAAC;QACpB,UAAU,CAAC,IAAI,CAAC,QAAM,CAAC,YAAY,EAAE,CAAC;MACvC;IACH,CAAC,EACD,YAAA;MACE,OAAO,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;QACzB,OAAO,CAAC,KAAK,EAAG,CAAC,QAAQ,EAAE;MAC5B;MACD,UAAU,CAAC,QAAQ,EAAE;IACvB,CAAC,EACD,UAAC,GAAG,EAAA;MACF,OAAO,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;QACzB,OAAO,CAAC,KAAK,EAAG,CAAC,KAAK,CAAC,GAAG,CAAC;MAC5B;MACD,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC;IACvB,CAAC,EACD,YAAA;MACE,MAAM,GAAG,IAAK;MACd,OAAO,GAAG,IAAK;IACjB,CAAC,CACF,CACF;EACH,CAAC,CAAC;AACJ","sourceRoot":"","sourcesContent":["import { __values } from \"tslib\";\nimport { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function windowCount(windowSize, startWindowEvery) {\n    if (startWindowEvery === void 0) { startWindowEvery = 0; }\n    var startEvery = startWindowEvery > 0 ? startWindowEvery : windowSize;\n    return operate(function (source, subscriber) {\n        var windows = [new Subject()];\n        var starts = [];\n        var count = 0;\n        subscriber.next(windows[0].asObservable());\n        source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n            var e_1, _a;\n            try {\n                for (var windows_1 = __values(windows), windows_1_1 = windows_1.next(); !windows_1_1.done; windows_1_1 = windows_1.next()) {\n                    var window_1 = windows_1_1.value;\n                    window_1.next(value);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (windows_1_1 && !windows_1_1.done && (_a = windows_1.return)) _a.call(windows_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            var c = count - windowSize + 1;\n            if (c >= 0 && c % startEvery === 0) {\n                windows.shift().complete();\n            }\n            if (++count % startEvery === 0) {\n                var window_2 = new Subject();\n                windows.push(window_2);\n                subscriber.next(window_2.asObservable());\n            }\n        }, function () {\n            while (windows.length > 0) {\n                windows.shift().complete();\n            }\n            subscriber.complete();\n        }, function (err) {\n            while (windows.length > 0) {\n                windows.shift().error(err);\n            }\n            subscriber.error(err);\n        }, function () {\n            starts = null;\n            windows = null;\n        }));\n    });\n}\n//# sourceMappingURL=windowCount.js.map"]},"metadata":{},"sourceType":"module"}