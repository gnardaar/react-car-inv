{"ast":null,"code":"import { Observable } from '../Observable';\nimport { EMPTY } from './empty';\nexport function range(start, count, scheduler) {\n  if (count == null) {\n    count = start;\n    start = 0;\n  }\n  if (count <= 0) {\n    return EMPTY;\n  }\n  var end = count + start;\n  return new Observable(scheduler ? function (subscriber) {\n    var n = start;\n    return scheduler.schedule(function () {\n      if (n < end) {\n        subscriber.next(n++);\n        this.schedule();\n      } else {\n        subscriber.complete();\n      }\n    });\n  } : function (subscriber) {\n    var n = start;\n    while (n < end && !subscriber.closed) {\n      subscriber.next(n++);\n    }\n    subscriber.complete();\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/observable/range.ts"],"names":[],"mappings":"AACA,SAAS,UAAU,QAAQ,eAAe;AAC1C,SAAS,KAAK,QAAQ,SAAS;AAqD/B,OAAM,SAAU,KAAK,CAAC,KAAa,EAAE,KAAc,EAAE,SAAyB,EAAA;EAC5E,IAAI,KAAK,IAAI,IAAI,EAAE;IAEjB,KAAK,GAAG,KAAK;IACb,KAAK,GAAG,CAAC;EACV;EAED,IAAI,KAAK,IAAI,CAAC,EAAE;IAEd,OAAO,KAAK;EACb;EAGD,IAAM,GAAG,GAAG,KAAK,GAAG,KAAK;EAEzB,OAAO,IAAI,UAAU,CACnB,SAAS,GAEL,UAAC,UAAU,EAAA;IACT,IAAI,CAAC,GAAG,KAAK;IACb,OAAO,SAAS,CAAC,QAAQ,CAAC,YAAA;MACxB,IAAI,CAAC,GAAG,GAAG,EAAE;QACX,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC;QACpB,IAAI,CAAC,QAAQ,EAAE;OAChB,MAAM;QACL,UAAU,CAAC,QAAQ,EAAE;MACtB;IACH,CAAC,CAAC;EACJ,CAAC,GAED,UAAC,UAAU,EAAA;IACT,IAAI,CAAC,GAAG,KAAK;IACb,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;MACpC,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC;IACrB;IACD,UAAU,CAAC,QAAQ,EAAE;EACvB,CAAC,CACN;AACH","sourceRoot":"","sourcesContent":["import { Observable } from '../Observable';\nimport { EMPTY } from './empty';\nexport function range(start, count, scheduler) {\n    if (count == null) {\n        count = start;\n        start = 0;\n    }\n    if (count <= 0) {\n        return EMPTY;\n    }\n    var end = count + start;\n    return new Observable(scheduler\n        ?\n            function (subscriber) {\n                var n = start;\n                return scheduler.schedule(function () {\n                    if (n < end) {\n                        subscriber.next(n++);\n                        this.schedule();\n                    }\n                    else {\n                        subscriber.complete();\n                    }\n                });\n            }\n        :\n            function (subscriber) {\n                var n = start;\n                while (n < end && !subscriber.closed) {\n                    subscriber.next(n++);\n                }\n                subscriber.complete();\n            });\n}\n//# sourceMappingURL=range.js.map"]},"metadata":{},"sourceType":"module"}