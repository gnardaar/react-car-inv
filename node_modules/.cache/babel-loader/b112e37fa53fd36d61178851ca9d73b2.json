{"ast":null,"code":"import { map } from './map';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\nimport { isFunction } from '../util/isFunction';\nexport function mergeMap(project, resultSelector, concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Infinity;\n  }\n  if (isFunction(resultSelector)) {\n    return mergeMap(function (a, i) {\n      return map(function (b, ii) {\n        return resultSelector(a, b, i, ii);\n      })(innerFrom(project(a, i)));\n    }, concurrent);\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n  return operate(function (source, subscriber) {\n    return mergeInternals(source, subscriber, project, concurrent);\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/operators/mergeMap.ts"],"names":[],"mappings":"AACA,SAAS,GAAG,QAAQ,OAAO;AAC3B,SAAS,SAAS,QAAQ,yBAAyB;AACnD,SAAS,OAAO,QAAQ,cAAc;AACtC,SAAS,cAAc,QAAQ,kBAAkB;AACjD,SAAS,UAAU,QAAQ,oBAAoB;AA6E/C,OAAM,SAAU,QAAQ,CACtB,OAAuC,EACvC,cAAwH,EACxH,UAA6B,EAAA;EAA7B,IAAA,UAAA,KAAA,KAAA,CAAA,EAAA;IAAA,UAAA,GAAA,QAA6B;EAAA;EAE7B,IAAI,UAAU,CAAC,cAAc,CAAC,EAAE;IAE9B,OAAO,QAAQ,CAAC,UAAC,CAAC,EAAE,CAAC,EAAA;MAAK,OAAA,GAAG,CAAC,UAAC,CAAM,EAAE,EAAU,EAAA;QAAK,OAAA,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;MAA3B,CAA2B,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAAlF,CAAkF,EAAE,UAAU,CAAC;GAC1H,MAAM,IAAI,OAAO,cAAc,KAAK,QAAQ,EAAE;IAC7C,UAAU,GAAG,cAAc;EAC5B;EAED,OAAO,OAAO,CAAC,UAAC,MAAM,EAAE,UAAU,EAAA;IAAK,OAAA,cAAc,CAAC,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,UAAU,CAAC;EAAvD,CAAuD,CAAC;AACjG","sourceRoot":"","sourcesContent":["import { map } from './map';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\nimport { isFunction } from '../util/isFunction';\nexport function mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Infinity; }\n    if (isFunction(resultSelector)) {\n        return mergeMap(function (a, i) { return map(function (b, ii) { return resultSelector(a, b, i, ii); })(innerFrom(project(a, i))); }, concurrent);\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return operate(function (source, subscriber) { return mergeInternals(source, subscriber, project, concurrent); });\n}\n//# sourceMappingURL=mergeMap.js.map"]},"metadata":{},"sourceType":"module"}