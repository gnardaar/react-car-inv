{"ast":null,"code":"import { __read } from \"tslib\";\nimport { innerFrom } from '../observable/innerFrom';\nimport { Observable } from '../Observable';\nimport { mergeMap } from '../operators/mergeMap';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isFunction } from '../util/isFunction';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nvar nodeEventEmitterMethods = ['addListener', 'removeListener'];\nvar eventTargetMethods = ['addEventListener', 'removeEventListener'];\nvar jqueryMethods = ['on', 'off'];\nexport function fromEvent(target, eventName, options, resultSelector) {\n  if (isFunction(options)) {\n    resultSelector = options;\n    options = undefined;\n  }\n  if (resultSelector) {\n    return fromEvent(target, eventName, options).pipe(mapOneOrManyArgs(resultSelector));\n  }\n  var _a = __read(isEventTarget(target) ? eventTargetMethods.map(function (methodName) {\n      return function (handler) {\n        return target[methodName](eventName, handler, options);\n      };\n    }) : isNodeStyleEventEmitter(target) ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName)) : isJQueryStyleEventEmitter(target) ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName)) : [], 2),\n    add = _a[0],\n    remove = _a[1];\n  if (!add) {\n    if (isArrayLike(target)) {\n      return mergeMap(function (subTarget) {\n        return fromEvent(subTarget, eventName, options);\n      })(innerFrom(target));\n    }\n  }\n  if (!add) {\n    throw new TypeError('Invalid event target');\n  }\n  return new Observable(function (subscriber) {\n    var handler = function handler() {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return subscriber.next(1 < args.length ? args : args[0]);\n    };\n    add(handler);\n    return function () {\n      return remove(handler);\n    };\n  });\n}\nfunction toCommonHandlerRegistry(target, eventName) {\n  return function (methodName) {\n    return function (handler) {\n      return target[methodName](eventName, handler);\n    };\n  };\n}\nfunction isNodeStyleEventEmitter(target) {\n  return isFunction(target.addListener) && isFunction(target.removeListener);\n}\nfunction isJQueryStyleEventEmitter(target) {\n  return isFunction(target.on) && isFunction(target.off);\n}\nfunction isEventTarget(target) {\n  return isFunction(target.addEventListener) && isFunction(target.removeEventListener);\n}","map":{"version":3,"sources":["../../../../src/internal/observable/fromEvent.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __read } from \"tslib\";\nimport { innerFrom } from '../observable/innerFrom';\nimport { Observable } from '../Observable';\nimport { mergeMap } from '../operators/mergeMap';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isFunction } from '../util/isFunction';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nvar nodeEventEmitterMethods = ['addListener', 'removeListener'];\nvar eventTargetMethods = ['addEventListener', 'removeEventListener'];\nvar jqueryMethods = ['on', 'off'];\nexport function fromEvent(target, eventName, options, resultSelector) {\n    if (isFunction(options)) {\n        resultSelector = options;\n        options = undefined;\n    }\n    if (resultSelector) {\n        return fromEvent(target, eventName, options).pipe(mapOneOrManyArgs(resultSelector));\n    }\n    var _a = __read(isEventTarget(target)\n        ? eventTargetMethods.map(function (methodName) { return function (handler) { return target[methodName](eventName, handler, options); }; })\n        :\n            isNodeStyleEventEmitter(target)\n                ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))\n                : isJQueryStyleEventEmitter(target)\n                    ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))\n                    : [], 2), add = _a[0], remove = _a[1];\n    if (!add) {\n        if (isArrayLike(target)) {\n            return mergeMap(function (subTarget) { return fromEvent(subTarget, eventName, options); })(innerFrom(target));\n        }\n    }\n    if (!add) {\n        throw new TypeError('Invalid event target');\n    }\n    return new Observable(function (subscriber) {\n        var handler = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return subscriber.next(1 < args.length ? args : args[0]);\n        };\n        add(handler);\n        return function () { return remove(handler); };\n    });\n}\nfunction toCommonHandlerRegistry(target, eventName) {\n    return function (methodName) { return function (handler) { return target[methodName](eventName, handler); }; };\n}\nfunction isNodeStyleEventEmitter(target) {\n    return isFunction(target.addListener) && isFunction(target.removeListener);\n}\nfunction isJQueryStyleEventEmitter(target) {\n    return isFunction(target.on) && isFunction(target.off);\n}\nfunction isEventTarget(target) {\n    return isFunction(target.addEventListener) && isFunction(target.removeEventListener);\n}\n//# sourceMappingURL=fromEvent.js.map"]},"metadata":{},"sourceType":"module"}