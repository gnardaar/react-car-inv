{"ast":null,"code":"import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nimport { timer } from '../observable/timer';\nimport { innerFrom } from '../observable/innerFrom';\nexport function retry(configOrCount) {\n  if (configOrCount === void 0) {\n    configOrCount = Infinity;\n  }\n  var config;\n  if (configOrCount && typeof configOrCount === 'object') {\n    config = configOrCount;\n  } else {\n    config = {\n      count: configOrCount\n    };\n  }\n  var _a = config.count,\n    count = _a === void 0 ? Infinity : _a,\n    delay = config.delay,\n    _b = config.resetOnSuccess,\n    resetOnSuccess = _b === void 0 ? false : _b;\n  return count <= 0 ? identity : operate(function (source, subscriber) {\n    var soFar = 0;\n    var innerSub;\n    var subscribeForRetry = function subscribeForRetry() {\n      var syncUnsub = false;\n      innerSub = source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n        if (resetOnSuccess) {\n          soFar = 0;\n        }\n        subscriber.next(value);\n      }, undefined, function (err) {\n        if (soFar++ < count) {\n          var resub_1 = function resub_1() {\n            if (innerSub) {\n              innerSub.unsubscribe();\n              innerSub = null;\n              subscribeForRetry();\n            } else {\n              syncUnsub = true;\n            }\n          };\n          if (delay != null) {\n            var notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(err, soFar));\n            var notifierSubscriber_1 = createOperatorSubscriber(subscriber, function () {\n              notifierSubscriber_1.unsubscribe();\n              resub_1();\n            }, function () {\n              subscriber.complete();\n            });\n            notifier.subscribe(notifierSubscriber_1);\n          } else {\n            resub_1();\n          }\n        } else {\n          subscriber.error(err);\n        }\n      }));\n      if (syncUnsub) {\n        innerSub.unsubscribe();\n        innerSub = null;\n        subscribeForRetry();\n      }\n    };\n    subscribeForRetry();\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/operators/retry.ts"],"names":[],"mappings":"AACA,SAAS,OAAO,QAAQ,cAAc;AAEtC,SAAS,wBAAwB,QAAQ,sBAAsB;AAC/D,SAAS,QAAQ,QAAQ,kBAAkB;AAC3C,SAAS,KAAK,QAAQ,qBAAqB;AAC3C,SAAS,SAAS,QAAQ,yBAAyB;AA4EnD,OAAM,SAAU,KAAK,CAAI,aAA8C,EAAA;EAA9C,IAAA,aAAA,KAAA,KAAA,CAAA,EAAA;IAAA,aAAA,GAAA,QAA8C;EAAA;EACrE,IAAI,MAAmB;EACvB,IAAI,aAAa,IAAI,OAAO,aAAa,KAAK,QAAQ,EAAE;IACtD,MAAM,GAAG,aAAa;GACvB,MAAM;IACL,MAAM,GAAG;MACP,KAAK,EAAE;KACR;EACF;EACO,IAAA,EAAA,GAAoE,MAAM,CAAA,KAA1D;IAAhB,KAAK,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,QAAQ,GAAA,EAAA;IAAE,KAAK,GAA6C,MAAM,CAAA,KAAnD;IAAE,EAAA,GAA2C,MAAM,CAAA,cAAX;IAAtB,cAAc,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAK,GAAA,EAAA;EAEvE,OAAO,KAAK,IAAI,CAAC,GACb,QAAQ,GACR,OAAO,CAAC,UAAC,MAAM,EAAE,UAAU,EAAA;IACzB,IAAI,KAAK,GAAG,CAAC;IACb,IAAI,QAA6B;IACjC,IAAM,iBAAiB,GAAG,SAApB,iBAAiB,GAAG;MACxB,IAAI,SAAS,GAAG,KAAK;MACrB,QAAQ,GAAG,MAAM,CAAC,SAAS,CACzB,wBAAwB,CACtB,UAAU,EACV,UAAC,KAAK,EAAA;QAEJ,IAAI,cAAc,EAAE;UAClB,KAAK,GAAG,CAAC;QACV;QACD,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC;MACxB,CAAC,EAED,SAAS,EACT,UAAC,GAAG,EAAA;QACF,IAAI,KAAK,EAAE,GAAG,KAAK,EAAE;UAEnB,IAAM,OAAK,GAAG,SAAR,OAAK,GAAG;YACZ,IAAI,QAAQ,EAAE;cACZ,QAAQ,CAAC,WAAW,EAAE;cACtB,QAAQ,GAAG,IAAI;cACf,iBAAiB,EAAE;aACpB,MAAM;cACL,SAAS,GAAG,IAAI;YACjB;UACH,CAAC;UAED,IAAI,KAAK,IAAI,IAAI,EAAE;YAIjB,IAAM,QAAQ,GAAG,OAAO,KAAK,KAAK,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YACxF,IAAM,oBAAkB,GAAG,wBAAwB,CACjD,UAAU,EACV,YAAA;cAIE,oBAAkB,CAAC,WAAW,EAAE;cAChC,OAAK,EAAE;YACT,CAAC,EACD,YAAA;cAGE,UAAU,CAAC,QAAQ,EAAE;YACvB,CAAC,CACF;YACD,QAAQ,CAAC,SAAS,CAAC,oBAAkB,CAAC;WACvC,MAAM;YAEL,OAAK,EAAE;UACR;SACF,MAAM;UAGL,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC;QACtB;MACH,CAAC,CACF,CACF;MACD,IAAI,SAAS,EAAE;QACb,QAAQ,CAAC,WAAW,EAAE;QACtB,QAAQ,GAAG,IAAI;QACf,iBAAiB,EAAE;MACpB;IACH,CAAC;IACD,iBAAiB,EAAE;EACrB,CAAC,CAAC;AACR","sourceRoot":"","sourcesContent":["import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nimport { timer } from '../observable/timer';\nimport { innerFrom } from '../observable/innerFrom';\nexport function retry(configOrCount) {\n    if (configOrCount === void 0) { configOrCount = Infinity; }\n    var config;\n    if (configOrCount && typeof configOrCount === 'object') {\n        config = configOrCount;\n    }\n    else {\n        config = {\n            count: configOrCount,\n        };\n    }\n    var _a = config.count, count = _a === void 0 ? Infinity : _a, delay = config.delay, _b = config.resetOnSuccess, resetOnSuccess = _b === void 0 ? false : _b;\n    return count <= 0\n        ? identity\n        : operate(function (source, subscriber) {\n            var soFar = 0;\n            var innerSub;\n            var subscribeForRetry = function () {\n                var syncUnsub = false;\n                innerSub = source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n                    if (resetOnSuccess) {\n                        soFar = 0;\n                    }\n                    subscriber.next(value);\n                }, undefined, function (err) {\n                    if (soFar++ < count) {\n                        var resub_1 = function () {\n                            if (innerSub) {\n                                innerSub.unsubscribe();\n                                innerSub = null;\n                                subscribeForRetry();\n                            }\n                            else {\n                                syncUnsub = true;\n                            }\n                        };\n                        if (delay != null) {\n                            var notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(err, soFar));\n                            var notifierSubscriber_1 = createOperatorSubscriber(subscriber, function () {\n                                notifierSubscriber_1.unsubscribe();\n                                resub_1();\n                            }, function () {\n                                subscriber.complete();\n                            });\n                            notifier.subscribe(notifierSubscriber_1);\n                        }\n                        else {\n                            resub_1();\n                        }\n                    }\n                    else {\n                        subscriber.error(err);\n                    }\n                }));\n                if (syncUnsub) {\n                    innerSub.unsubscribe();\n                    innerSub = null;\n                    subscribeForRetry();\n                }\n            };\n            subscribeForRetry();\n        });\n}\n//# sourceMappingURL=retry.js.map"]},"metadata":{},"sourceType":"module"}