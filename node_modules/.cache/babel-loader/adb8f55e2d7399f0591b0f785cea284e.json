{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { operate } from '../util/lift';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { mergeAll } from './mergeAll';\nimport { popNumber, popScheduler } from '../util/args';\nimport { from } from '../observable/from';\nexport function merge() {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  var scheduler = popScheduler(args);\n  var concurrent = popNumber(args, Infinity);\n  args = argsOrArgArray(args);\n  return operate(function (source, subscriber) {\n    mergeAll(concurrent)(from(__spreadArray([source], __read(args)), scheduler)).subscribe(subscriber);\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/operators/merge.ts"],"names":[],"mappings":";AACA,SAAS,OAAO,QAAQ,cAAc;AACtC,SAAS,cAAc,QAAQ,wBAAwB;AACvD,SAAS,QAAQ,QAAQ,YAAY;AACrC,SAAS,SAAS,EAAE,YAAY,QAAQ,cAAc;AACtD,SAAS,IAAI,QAAQ,oBAAoB;AAiBzC,OAAM,SAAU,KAAK,GAAA;EAAI,IAAA,IAAA,GAAA,EAAA;OAAA,IAAA,EAAA,GAAA,CAAkB,EAAlB,EAAA,GAAA,SAAA,CAAA,MAAkB,EAAlB,EAAA,EAAkB,EAAA;IAAlB,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;EACvB,IAAM,SAAS,GAAG,YAAY,CAAC,IAAI,CAAC;EACpC,IAAM,UAAU,GAAG,SAAS,CAAC,IAAI,EAAE,QAAQ,CAAC;EAC5C,IAAI,GAAG,cAAc,CAAC,IAAI,CAAC;EAE3B,OAAO,OAAO,CAAC,UAAC,MAAM,EAAE,UAAU,EAAA;IAChC,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,CAAA,aAAA,CAAA,CAAE,MAAM,CAAA,EAAA,MAAA,CAAM,IAA6B,CAAA,CAAA,EAAG,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC;EAC1G,CAAC,CAAC;AACJ","sourceRoot":"","sourcesContent":["import { __read, __spreadArray } from \"tslib\";\nimport { operate } from '../util/lift';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { mergeAll } from './mergeAll';\nimport { popNumber, popScheduler } from '../util/args';\nimport { from } from '../observable/from';\nexport function merge() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var scheduler = popScheduler(args);\n    var concurrent = popNumber(args, Infinity);\n    args = argsOrArgArray(args);\n    return operate(function (source, subscriber) {\n        mergeAll(concurrent)(from(__spreadArray([source], __read(args)), scheduler)).subscribe(subscriber);\n    });\n}\n//# sourceMappingURL=merge.js.map"]},"metadata":{},"sourceType":"module"}