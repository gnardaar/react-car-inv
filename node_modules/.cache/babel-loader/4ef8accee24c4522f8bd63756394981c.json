{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { hasLift } from '../util/lift';\nvar ConnectableObservable = function (_super) {\n  __extends(ConnectableObservable, _super);\n  function ConnectableObservable(source, subjectFactory) {\n    var _this = _super.call(this) || this;\n    _this.source = source;\n    _this.subjectFactory = subjectFactory;\n    _this._subject = null;\n    _this._refCount = 0;\n    _this._connection = null;\n    if (hasLift(source)) {\n      _this.lift = source.lift;\n    }\n    return _this;\n  }\n  ConnectableObservable.prototype._subscribe = function (subscriber) {\n    return this.getSubject().subscribe(subscriber);\n  };\n  ConnectableObservable.prototype.getSubject = function () {\n    var subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  };\n  ConnectableObservable.prototype._teardown = function () {\n    this._refCount = 0;\n    var _connection = this._connection;\n    this._subject = this._connection = null;\n    _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();\n  };\n  ConnectableObservable.prototype.connect = function () {\n    var _this = this;\n    var connection = this._connection;\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      var subject_1 = this.getSubject();\n      connection.add(this.source.subscribe(createOperatorSubscriber(subject_1, undefined, function () {\n        _this._teardown();\n        subject_1.complete();\n      }, function (err) {\n        _this._teardown();\n        subject_1.error(err);\n      }, function () {\n        return _this._teardown();\n      })));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      }\n    }\n    return connection;\n  };\n  ConnectableObservable.prototype.refCount = function () {\n    return higherOrderRefCount()(this);\n  };\n  return ConnectableObservable;\n}(Observable);\nexport { ConnectableObservable };","map":{"version":3,"sources":["../../../../src/internal/observable/ConnectableObservable.ts"],"names":[],"mappings":";AACA,SAAS,UAAU,QAAQ,eAAe;AAE1C,SAAS,YAAY,QAAQ,iBAAiB;AAC9C,SAAS,QAAQ,IAAI,mBAAmB,QAAQ,uBAAuB;AACvE,SAAS,wBAAwB,QAAQ,iCAAiC;AAC1E,SAAS,OAAO,QAAQ,cAAc;AAStC,IAAA,qBAAA,GAAA,UAAA,MAAA,EAAA;EAA8C,SAAA,CAAA,qBAAA,EAAA,MAAA,CAAA;EAgB5C,SAAA,qBAAA,CAAmB,MAAqB,EAAY,cAAgC,EAAA;IAApF,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,CAAO,IAAA,IAAA;IADU,KAAA,CAAA,MAAM,GAAN,MAAM;IAA2B,KAAA,CAAA,cAAc,GAAd,cAAc;IAfxD,KAAA,CAAA,QAAQ,GAAsB,IAAI;IAClC,KAAA,CAAA,SAAS,GAAW,CAAC;IACrB,KAAA,CAAA,WAAW,GAAwB,IAAI;IAkB/C,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE;MACnB,KAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI;IACxB;;EACH;EAGU,qBAAA,CAAA,SAAA,CAAA,UAAU,GAApB,UAAqB,UAAyB,EAAA;IAC5C,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC;EAChD,CAAC;EAES,qBAAA,CAAA,SAAA,CAAA,UAAU,GAApB,YAAA;IACE,IAAM,OAAO,GAAG,IAAI,CAAC,QAAQ;IAC7B,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC,SAAS,EAAE;MACjC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,cAAc,EAAE;IACtC;IACD,OAAO,IAAI,CAAC,QAAS;EACvB,CAAC;EAES,qBAAA,CAAA,SAAA,CAAA,SAAS,GAAnB,YAAA;IACE,IAAI,CAAC,SAAS,GAAG,CAAC;IACV,IAAA,WAAW,GAAK,IAAI,CAAA,WAAT;IACnB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,GAAG,IAAI;IACvC,WAAW,KAAA,IAAA,IAAX,WAAW,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAX,WAAW,CAAE,WAAW,EAAE;EAC5B,CAAC;EAMD,qBAAA,CAAA,SAAA,CAAA,OAAO,GAAP,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;IACE,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW;IACjC,IAAI,CAAC,UAAU,EAAE;MACf,UAAU,GAAG,IAAI,CAAC,WAAW,GAAG,IAAI,YAAY,EAAE;MAClD,IAAM,SAAO,GAAG,IAAI,CAAC,UAAU,EAAE;MACjC,UAAU,CAAC,GAAG,CACZ,IAAI,CAAC,MAAM,CAAC,SAAS,CACnB,wBAAwB,CACtB,SAAc,EACd,SAAS,EACT,YAAA;QACE,KAAI,CAAC,SAAS,EAAE;QAChB,SAAO,CAAC,QAAQ,EAAE;MACpB,CAAC,EACD,UAAC,GAAG,EAAA;QACF,KAAI,CAAC,SAAS,EAAE;QAChB,SAAO,CAAC,KAAK,CAAC,GAAG,CAAC;MACpB,CAAC,EACD,YAAA;QAAM,OAAA,KAAI,CAAC,SAAS,EAAE;MAAhB,CAAgB,CACvB,CACF,CACF;MAED,IAAI,UAAU,CAAC,MAAM,EAAE;QACrB,IAAI,CAAC,WAAW,GAAG,IAAI;QACvB,UAAU,GAAG,YAAY,CAAC,KAAK;MAChC;IACF;IACD,OAAO,UAAU;EACnB,CAAC;EAMD,qBAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,YAAA;IACE,OAAO,mBAAmB,EAAE,CAAC,IAAI,CAAkB;EACrD,CAAC;EACH,OAAA,qBAAC;AAAD,CAAC,CAxF6C,UAAU,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { hasLift } from '../util/lift';\nvar ConnectableObservable = (function (_super) {\n    __extends(ConnectableObservable, _super);\n    function ConnectableObservable(source, subjectFactory) {\n        var _this = _super.call(this) || this;\n        _this.source = source;\n        _this.subjectFactory = subjectFactory;\n        _this._subject = null;\n        _this._refCount = 0;\n        _this._connection = null;\n        if (hasLift(source)) {\n            _this.lift = source.lift;\n        }\n        return _this;\n    }\n    ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype._teardown = function () {\n        this._refCount = 0;\n        var _connection = this._connection;\n        this._subject = this._connection = null;\n        _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var _this = this;\n        var connection = this._connection;\n        if (!connection) {\n            connection = this._connection = new Subscription();\n            var subject_1 = this.getSubject();\n            connection.add(this.source.subscribe(createOperatorSubscriber(subject_1, undefined, function () {\n                _this._teardown();\n                subject_1.complete();\n            }, function (err) {\n                _this._teardown();\n                subject_1.error(err);\n            }, function () { return _this._teardown(); })));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return higherOrderRefCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable));\nexport { ConnectableObservable };\n//# sourceMappingURL=ConnectableObservable.js.map"]},"metadata":{},"sourceType":"module"}