{"ast":null,"code":"import { Observable } from '../Observable';\nimport { innerFrom } from '../observable/innerFrom';\nimport { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber, OperatorSubscriber } from './OperatorSubscriber';\nexport function groupBy(keySelector, elementOrOptions, duration, connector) {\n  return operate(function (source, subscriber) {\n    var element;\n    if (!elementOrOptions || typeof elementOrOptions === 'function') {\n      element = elementOrOptions;\n    } else {\n      duration = elementOrOptions.duration, element = elementOrOptions.element, connector = elementOrOptions.connector;\n    }\n    var groups = new Map();\n    var notify = function (cb) {\n      groups.forEach(cb);\n      cb(subscriber);\n    };\n    var handleError = function (err) {\n      return notify(function (consumer) {\n        return consumer.error(err);\n      });\n    };\n    var activeGroups = 0;\n    var teardownAttempted = false;\n    var groupBySourceSubscriber = new OperatorSubscriber(subscriber, function (value) {\n      try {\n        var key_1 = keySelector(value);\n        var group_1 = groups.get(key_1);\n        if (!group_1) {\n          groups.set(key_1, group_1 = connector ? connector() : new Subject());\n          var grouped = createGroupedObservable(key_1, group_1);\n          subscriber.next(grouped);\n          if (duration) {\n            var durationSubscriber_1 = createOperatorSubscriber(group_1, function () {\n              group_1.complete();\n              durationSubscriber_1 === null || durationSubscriber_1 === void 0 ? void 0 : durationSubscriber_1.unsubscribe();\n            }, undefined, undefined, function () {\n              return groups.delete(key_1);\n            });\n            groupBySourceSubscriber.add(innerFrom(duration(grouped)).subscribe(durationSubscriber_1));\n          }\n        }\n        group_1.next(element ? element(value) : value);\n      } catch (err) {\n        handleError(err);\n      }\n    }, function () {\n      return notify(function (consumer) {\n        return consumer.complete();\n      });\n    }, handleError, function () {\n      return groups.clear();\n    }, function () {\n      teardownAttempted = true;\n      return activeGroups === 0;\n    });\n    source.subscribe(groupBySourceSubscriber);\n    function createGroupedObservable(key, groupSubject) {\n      var result = new Observable(function (groupSubscriber) {\n        activeGroups++;\n        var innerSub = groupSubject.subscribe(groupSubscriber);\n        return function () {\n          innerSub.unsubscribe();\n          --activeGroups === 0 && teardownAttempted && groupBySourceSubscriber.unsubscribe();\n        };\n      });\n      result.key = key;\n      return result;\n    }\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/operators/groupBy.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Observable } from '../Observable';\nimport { innerFrom } from '../observable/innerFrom';\nimport { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber, OperatorSubscriber } from './OperatorSubscriber';\nexport function groupBy(keySelector, elementOrOptions, duration, connector) {\n    return operate(function (source, subscriber) {\n        var element;\n        if (!elementOrOptions || typeof elementOrOptions === 'function') {\n            element = elementOrOptions;\n        }\n        else {\n            (duration = elementOrOptions.duration, element = elementOrOptions.element, connector = elementOrOptions.connector);\n        }\n        var groups = new Map();\n        var notify = function (cb) {\n            groups.forEach(cb);\n            cb(subscriber);\n        };\n        var handleError = function (err) { return notify(function (consumer) { return consumer.error(err); }); };\n        var activeGroups = 0;\n        var teardownAttempted = false;\n        var groupBySourceSubscriber = new OperatorSubscriber(subscriber, function (value) {\n            try {\n                var key_1 = keySelector(value);\n                var group_1 = groups.get(key_1);\n                if (!group_1) {\n                    groups.set(key_1, (group_1 = connector ? connector() : new Subject()));\n                    var grouped = createGroupedObservable(key_1, group_1);\n                    subscriber.next(grouped);\n                    if (duration) {\n                        var durationSubscriber_1 = createOperatorSubscriber(group_1, function () {\n                            group_1.complete();\n                            durationSubscriber_1 === null || durationSubscriber_1 === void 0 ? void 0 : durationSubscriber_1.unsubscribe();\n                        }, undefined, undefined, function () { return groups.delete(key_1); });\n                        groupBySourceSubscriber.add(innerFrom(duration(grouped)).subscribe(durationSubscriber_1));\n                    }\n                }\n                group_1.next(element ? element(value) : value);\n            }\n            catch (err) {\n                handleError(err);\n            }\n        }, function () { return notify(function (consumer) { return consumer.complete(); }); }, handleError, function () { return groups.clear(); }, function () {\n            teardownAttempted = true;\n            return activeGroups === 0;\n        });\n        source.subscribe(groupBySourceSubscriber);\n        function createGroupedObservable(key, groupSubject) {\n            var result = new Observable(function (groupSubscriber) {\n                activeGroups++;\n                var innerSub = groupSubject.subscribe(groupSubscriber);\n                return function () {\n                    innerSub.unsubscribe();\n                    --activeGroups === 0 && teardownAttempted && groupBySourceSubscriber.unsubscribe();\n                };\n            });\n            result.key = key;\n            return result;\n        }\n    });\n}\n//# sourceMappingURL=groupBy.js.map"]},"metadata":{},"sourceType":"module"}